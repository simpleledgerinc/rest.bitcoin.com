{
	"components": {
		"schemas": {
			"Address": {
				"type": "string"
			},
			"Hash": {
				"type": "string"
			},
			"Txid": {
				"type": "string"
			},
			"Hex": {
				"type": "string"
			},
			"Height": {
				"type": "number"
			},
			"Proof": {
				"type": "string"
			},
			"Addresses": {
				"type": "object",
				"properties": {
					"addresses": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Address"
						},
						"example": [
							"bitcoincash:qzs02v05l7qs5s24srqju498qu55dwuj0cx5ehjm2c",
							"bitcoincash:qrehqueqhw629p6e57994436w730t4rzasnly00ht0"
						]
					}
				}
			},
			"Hashes": {
				"type": "object",
				"properties": {
					"hashes": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Hash"
						},
						"example": [
							"000000000000000005e14d3f9fdfb70745308706615cfa9edca4f4558332b201",
							"00000000000000000568f0a96bf4348847bc84e455cbfec389f27311037a20f3"
						]
					},
					"verbose": {
						"type": "boolean",
						"example": true
					}
				}
			},
			"BlockHashes": {
				"type": "object",
				"properties": {
					"hashes": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Hash"
						},
						"example": []
					}
				}
			},
			"BlockHeights": {
				"type": "object",
				"properties": {
					"heights": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Heights"
						},
						"example": []
					}
				}
			},
			"Heights": {
				"type": "object",
				"properties": {
					"heights": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Heights"
						},
						"example": []
					}
				}
			},
			"Hexes": {
				"type": "object",
				"properties": {
					"hexes": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Hex"
						},
						"example": [
							"01000000013ba3edfd7a7b12b27ac72c3e67768f617fc81bc3888a51323a9fb8aa4b1e5e4a000000006a4730440220540986d1c58d6e76f8f05501c520c38ce55393d0ed7ed3c3a82c69af04221232022058ea43ed6c05fec0eccce749a63332ed4525460105346f11108b9c26df93cd72012103083dfc5a0254613941ddc91af39ff90cd711cdcde03a87b144b883b524660c39ffffffff01807c814a000000001976a914d7e7c4e0b70eaa67ceff9d2823d1bbb9f6df9a5188ac00000000",
							"01000000013ba3edfd7a7b12b27ac72c3e67768f617fc81bc3888a51323a9fb8aa4b1e5e4a000000006a4730440220540986d1c58d6e76f8f05501c520c38ce55393d0ed7ed3c3a82c69af04221232022058ea43ed6c05fec0eccce749a63332ed4525460105346f11108b9c26df93cd72012103083dfc5a0254613941ddc91af39ff90cd711cdcde03a87b144b883b524660c39ffffffff01807c814a000000001976a914d7e7c4e0b70eaa67ceff9d2823d1bbb9f6df9a5188ac00000000"
						]
					}
				}
			},
			"Txids": {
				"type": "object",
				"properties": {
					"txids": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Txid"
						},
						"example": [
							"a5f972572ee1753e2fd2457dd61ce5f40fa2f8a30173d417e49feef7542c96a1",
							"5165dc531aad05d1149bb0f0d9b7bda99c73e2f05e314bcfb5b4bb9ca5e1af5e"
						]
					}
				}
			},
			"Proofs": {
				"type": "object",
				"properties": {
					"proofs": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Proof"
						},
						"example": [
							"010000007de867cc8adc5cc8fb6b898ca4462cf9fd667d7830a275277447e60800000000338f121232e169d3100edd82004dc2a1f0e1f030c6c488fa61eafa930b0528fe021f7449ffff001d36b4af9a0100000001338f121232e169d3100edd82004dc2a1f0e1f030c6c488fa61eafa930b0528fe0101",
							"000000202cbe31a32f4ad5b42877a9ccf9ff6edb3f5ab29ff73ec9000000000000000000069061a8809fed6557fa87eeb5aa7ac9e6720dcb2e2f401b40b7d83be5b4cb4f20a1e95b8c8d01188ca7c098e20100000a3705adb29177f22766afb07d46eb1d3f16a68fdd01c1ede671fcb954899ffed4c161c0a33aa8f6e562e40b1e0124818663e063004720d8d7e9074808a1f16ca56ba218571cb8069bc45bc8c6496ad9611b35d412e2545211ba85438be487d6dc39cd0ae63a41be9a89c4ed823fa6eceb0ceffe13638defa01109a514e639b89e5eafe1a59cbbb4b5cf4b315ef0e2739ca9bdb7d9f0b09b14d105ad1a53dc655176895cacc3f897d5088b004113f886df266edd1ff797f4550885f32380c8fb575be00072239baa70ccf354882e8c50a1d01e81ab2c85146d9e8c3c75140eca2d9d5640af739a86047493e24b1393745914a75fdfe19f081626a5846353c67b45ccf2dd6a753ba118e89239b7916be2ee06e34dc85257228edeaaca06efa0a565580872eff1787360bdf7ff274bb49437bef6a368ab578e34b739ddcc16088a8603ad3700"
						]
					}
				}
			},
			"AddressDetails": {
				"type": "object",
				"properties": {
					"balance": {
						"type": "number",
						"format": "float"
					},
					"balanceSat": {
						"type": "number",
						"format": "float"
					},
					"totalReceived": {
						"type": "number",
						"format": "float"
					},
					"totalReceivedSat": {
						"type": "number",
						"format": "float"
					},
					"totalSent": {
						"type": "number",
						"format": "float"
					},
					"totalSentSat": {
						"type": "number",
						"format": "float"
					},
					"unconfirmedBalance": {
						"type": "number",
						"format": "float"
					},
					"unconfirmedBalanceSat": {
						"type": "number",
						"format": "float"
					},
					"unconfirmedTxAppearances": {
						"type": "number",
						"format": "float"
					},
					"txAppearances": {
						"type": "number"
					},
					"transactions": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"legacyAddress": {
						"type": "string"
					},
					"cashAddress": {
						"type": "string"
					}
				}
			},
			"AddressDetailsArray": {
				"type": "array",
				"items": {
					"$ref": "#/components/schemas/AddressDetails"
				}
			},
			"AddressUtxo": {
				"type": "array",
				"items": {
					"$ref": "#/components/schemas/Utxo"
				}
			},
			"AddressUtxoArray": {
				"type": "array",
				"items": {
					"$ref": "#/components/schemas/AddressUtxo"
				},
				"example": []
			},
			"Utxo": {
				"type": "object",
				"properties": {
					"txid": {
						"type": "string"
					},
					"vout": {
						"type": "number"
					},
					"scriptPubKey": {
						"type": "string"
					},
					"amount": {
						"type": "number",
						"format": "float"
					},
					"satoshis": {
						"type": "number"
					},
					"height": {
						"type": "number"
					},
					"confirmations": {
						"type": "number"
					},
					"legacyAddress": {
						"type": "string"
					},
					"cashAddress": {
						"type": "string"
					}
				}
			},
			"AddressUnconfirmed": {
				"type": "array",
				"items": {
					"$ref": "#/components/schemas/Unconfirmed"
				}
			},
			"AddressUnconfirmedArray": {
				"type": "array",
				"items": {
					"$ref": "#/components/schemas/AddressUnconfirmed"
				},
				"example": []
			},
			"Unconfirmed": {
				"type": "object",
				"properties": {
					"txid": {
						"type": "string"
					},
					"vout": {
						"type": "number"
					},
					"scriptPubKey": {
						"type": "string"
					},
					"amount": {
						"type": "number",
						"format": "float"
					},
					"satoshis": {
						"type": "number"
					},
					"height": {
						"type": "number"
					},
					"confirmations": {
						"type": "number"
					},
					"legacyAddress": {
						"type": "string"
					},
					"cashAddress": {
						"type": "string"
					}
				}
			},
			"BlockDetails": {
				"type": "object",
				"properties": {
					"hash": {
						"type": "string"
					},
					"size": {
						"type": "number"
					},
					"height": {
						"type": "number"
					},
					"version": {
						"type": "number"
					},
					"merkleroot": {
						"type": "string"
					},
					"tx": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"time": {
						"type": "number"
					},
					"nonce": {
						"type": "number"
					},
					"bits": {
						"type": "string"
					},
					"difficulty": {
						"type": "number",
						"format": "float"
					},
					"chainwork": {
						"type": "string"
					},
					"confirmations": {
						"type": "number"
					},
					"previousblockhash": {
						"type": "string"
					},
					"nextblockhash": {
						"type": "string"
					},
					"reward": {
						"type": "number",
						"format": "float"
					},
					"isMainChain": {
						"type": "boolean"
					},
					"poolInfo": {
						"type": "object",
						"properties": {
							"poolName": "string",
							"url": "string"
						}
					}
				}
			},
			"BestBlockHash": {
				"type": "string"
			},
			"Block": {
				"type": "object",
				"properties": {
					"hash": {
						"type": "string"
					},
					"confirmations": {
						"type": "number"
					},
					"size": {
						"type": "number"
					},
					"height": {
						"type": "number"
					},
					"version": {
						"type": "number"
					},
					"versionHex": {
						"type": "string"
					},
					"merkleroot": {
						"type": "string"
					},
					"tx": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"time": {
						"type": "number"
					},
					"mediantime": {
						"type": "number"
					},
					"nonce": {
						"type": "number"
					},
					"bits": {
						"type": "string"
					},
					"difficulty": {
						"type": "number",
						"format": "float"
					},
					"chainwork": {
						"type": "string"
					},
					"previousblockhash": {
						"type": "string"
					},
					"nextblockhash": {
						"type": "string"
					}
				}
			},
			"BlockchainInfo": {
				"type": "object",
				"properties": {
					"chain": {
						"type": "string"
					},
					"blocks": {
						"type": "number"
					},
					"headers": {
						"type": "number"
					},
					"bestblockhash": {
						"type": "string"
					},
					"difficulty": {
						"type": "number",
						"format": "float"
					},
					"mediantime": {
						"type": "number"
					},
					"verificationprogress": {
						"type": "number",
						"format": "float"
					},
					"chainwork": {
						"type": "string"
					},
					"pruned": {
						"type": "boolean"
					},
					"softforks": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"id": "string",
								"version": "number",
								"reject": {
									"type": "object",
									"properties": {
										"status": "boolean"
									}
								}
							}
						}
					},
					"bip9_softforks": {
						"type": "object",
						"properties": {
							"status": "string",
							"startTime": "number",
							"timeout": "number",
							"since": "number"
						}
					}
				}
			},
			"BlockCount": {
				"type": "number"
			},
			"BlockHash": {
				"type": "string"
			},
			"BlockHeader": {
				"type": "object",
				"properties": {
					"hash": {
						"type": "string"
					},
					"confirmations": {
						"type": "number"
					},
					"height": {
						"type": "number"
					},
					"version": {
						"type": "number"
					},
					"versionHex": {
						"type": "string"
					},
					"merkleroot": {
						"type": "string"
					},
					"time": {
						"type": "number"
					},
					"mediantime": {
						"type": "number"
					},
					"nonce": {
						"type": "number"
					},
					"bits": {
						"type": "string"
					},
					"difficulty": {
						"type": "number",
						"format": "float"
					},
					"chainwork": {
						"type": "string"
					},
					"previousblockhash": {
						"type": "string"
					},
					"nextblockhash": {
						"type": "string"
					}
				}
			},
			"Difficulty": {
				"type": "number",
				"format": "float"
			},
			"MempoolInfo": {
				"type": "object",
				"properties": {
					"size": {
						"type": "number"
					},
					"bytes": {
						"type": "number"
					},
					"usage": {
						"type": "number"
					},
					"maxmempool": {
						"type": "number"
					},
					"mempoolminfee": {
						"type": "number"
					}
				}
			},
			"RawMempool": {
				"type": "array",
				"items": {
					"type": "string"
				}
			},
			"DecodeRawTransaction": {
				"type": "object",
				"properties": {
					"txid": {
						"type": "string"
					},
					"hash": {
						"type": "string"
					},
					"size": {
						"type": "number"
					},
					"version": {
						"type": "number"
					},
					"vin": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"txid": {
									"type": "string"
								},
								"vout": {
									"type": "number"
								},
								"scriptSig": {
									"type": "object",
									"properties": {
										"asm": {
											"type": "string"
										},
										"hex": {
											"type": "string"
										}
									}
								},
								"sequence": {
									"type": "string"
								}
							}
						}
					},
					"vout": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"value": {
									"type": "number"
								},
								"n": {
									"type": "number"
								},
								"scriptPubkey": {
									"type": "object",
									"properties": {
										"asm": {
											"type": "string"
										},
										"hex": {
											"type": "string"
										},
										"reqSigs": {
											"type": "number"
										},
										"type": {
											"type": "string"
										},
										"addresses": {
											"type": "array",
											"items": {
												"address": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"DecodeScript": {
				"type": "object",
				"properties": {
					"asm": {
						"type": "string"
					},
					"type": {
						"type": "string"
					},
					"p2sh": {
						"type": "string"
					}
				}
			},
			"GetRawTransaction": {
				"type": "object",
				"properties": {
					"hex": {
						"type": "string"
					},
					"txid": {
						"type": "string"
					},
					"hash": {
						"type": "string"
					},
					"size": {
						"type": "number"
					},
					"version": {
						"type": "number"
					},
					"vin": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"txid": {
									"type": "string"
								},
								"vout": {
									"type": "number"
								},
								"scriptSig": {
									"type": "object",
									"properties": {
										"asm": {
											"type": "string"
										},
										"hex": {
											"type": "string"
										},
										"sequence": {
											"type": "string"
										}
									}
								}
							}
						}
					},
					"vout": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"value": {
									"type": "number"
								},
								"n": {
									"type": "number"
								},
								"scriptPubkey": {
									"type": "object",
									"properties": {
										"asm": {
											"type": "string"
										},
										"hex": {
											"type": "string"
										},
										"reqSigs": {
											"type": "number"
										},
										"type": {
											"type": "string"
										},
										"addresses": {
											"type": "array",
											"items": {
												"address": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						}
					},
					"blockhash": {
						"type": "string"
					},
					"confirmations": {
						"type": "number"
					},
					"time": {
						"type": "number"
					},
					"blocktime": {
						"type": "number"
					}
				}
			},
			"TransactionDetails": {
				"type": "object",
				"properties": {
					"txid": {
						"type": "string"
					},
					"version": {
						"type": "number"
					},
					"locktime": {
						"type": "number"
					},
					"vin": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"txid": {
									"type": "string"
								},
								"vout": {
									"type": "number"
								},
								"sequence": {
									"type": "number"
								},
								"n": {
									"type": "number"
								},
								"scriptSig": {
									"type": "object",
									"properties": {
										"hex": {
											"type": "string"
										},
										"asm": {
											"type": "string"
										},
										"value": {
											"type": "number"
										},
										"legacyAddress": {
											"type": "string"
										},
										"cashAddress": {
											"type": "string"
										}
									}
								}
							}
						}
					},
					"vout": {
						"type": "array",
						"items": {
							"objects": {
								"type": "object",
								"properties": {
									"value": {
										"type": "number"
									},
									"n": {
										"type": "number"
									},
									"scriptPubkey": {
										"type": "object",
										"properties": {
											"hex": {
												"type": "string"
											},
											"asm": {
												"type": "string"
											},
											"addresses": {
												"type": "array",
												"items": {
													"address": {
														"type": "string"
													}
												}
											},
											"type": {
												"type": "string"
											}
										}
									},
									"spentTxId": {
										"type": "string"
									},
									"spentIndex": {
										"type": "number"
									},
									"spentHeight": {
										"type": "number"
									}
								}
							},
							"type": "object",
							"properties": {
								"value": {
									"type": "number"
								},
								"n": {
									"type": "number"
								},
								"scriptPubkey": {
									"type": "object",
									"properties": {
										"hex": {
											"type": "string"
										},
										"asm": {
											"type": "string"
										}
									}
								},
								"spentTxId": {
									"type": "string"
								},
								"spentIndex": {
									"type": "number"
								},
								"spentHeight": {
									"type": "number"
								}
							}
						}
					},
					"blockhash": {
						"type": "string"
					},
					"blockheight": {
						"type": "number"
					},
					"confirmations": {
						"type": "number"
					},
					"time": {
						"type": "number"
					},
					"valueOut": {
						"type": "number"
					},
					"size": {
						"type": "number"
					},
					"valueIn": {
						"type": "number"
					},
					"fees": {
						"type": "number"
					}
				}
			},
			"ValidateAddress": {
				"type": "object",
				"properties": {
					"isvalid": {
						"type": "boolean"
					},
					"address": {
						"type": "string"
					},
					"scriptPubKey": {
						"type": "string"
					},
					"ismine": {
						"type": "boolean"
					},
					"iswatchonly": {
						"type": "boolean"
					},
					"isscript": {
						"type": "boolean"
					}
				}
			},
			"Info": {
				"type": "object",
				"properties": {
					"version": {
						"type": "number"
					},
					"protocolversion": {
						"type": "number"
					},
					"blocks": {
						"type": "number"
					},
					"timeoffset": {
						"type": "number"
					},
					"connections": {
						"type": "number"
					},
					"proxy": {
						"type": "string"
					},
					"difficulty": {
						"type": "number",
						"format": "float"
					},
					"paytxfee": {
						"type": "number"
					},
					"relayfee": {
						"type": "number",
						"format": "float"
					},
					"errors": {
						"type": "string"
					}
				}
			},
			"MemoryInfo": {
				"type": "object",
				"properties": {
					"locked": {
						"type": "object",
						"properties": {
							"used": {
								"type": "number"
							},
							"free": {
								"type": "number"
							},
							"total": {
								"type": "number"
							},
							"locked": {
								"type": "number"
							},
							"chunks_used": {
								"type": "number"
							},
							"chunks_free": {
								"type": "number"
							}
						}
					}
				}
			},
			"MiningInfo": {
				"type": "object",
				"properties": {
					"blocks": {
						"type": "number"
					},
					"currentblocksize": {
						"type": "number"
					},
					"currentblocktx": {
						"type": "number"
					},
					"difficulty": {
						"type": "number",
						"format": "float"
					},
					"blockprioritypercentage": {
						"type": "number"
					},
					"errors": {
						"type": "string"
					},
					"networkhashps": {
						"type": "number"
					},
					"pooledtx": {
						"type": "number"
					},
					"chain": {
						"type": "string"
					}
				}
			},
			"NetworkHashps": {
				"type": "number"
			},
			"ConnectionCount": {
				"type": "number"
			},
			"MempoolAncestors": {
				"type": "array",
				"items": {
					"type": "string"
				}
			},
			"MempoolDescendants": {
				"type": "array",
				"items": {
					"type": "string"
				}
			},
			"PropertyId": {
				"type": "object",
				"properties": {
					"propertyId": {
						"type": "number",
						"example": 10
					}
				}
			},
			"Grant": {
				"type": "object",
				"properties": {
					"propertyId": {
						"type": "number",
						"example": 10
					},
					"amount": {
						"type": "string",
						"example": "10"
					},
					"memo": {
						"type": "string",
						"example": ""
					}
				}
			},
			"Crowdsale": {
				"type": "object",
				"properties": {
					"ecosystem": {
						"type": "string",
						"example": "1"
					},
					"propertyPrecision": {
						"type": "number",
						"example": 1
					},
					"previousId": {
						"type": "number",
						"example": 1
					},
					"category": {
						"type": "string",
						"example": "Companies"
					},
					"subcategory": {
						"type": "string",
						"example": "Bitcoin Mining"
					},
					"name": {
						"type": "string",
						"example": "Quantum Miner"
					},
					"url": {
						"type": "string",
						"example": "www.example.com"
					},
					"data": {
						"type": "string",
						"example": "Quantum Miner Tokens"
					},
					"propertyIdDesired": {
						"type": "number",
						"example": 1
					},
					"tokensPerUnit": {
						"type": "string",
						"example": "100"
					},
					"deadline": {
						"type": "number",
						"example": 1483228800
					},
					"earlyBonus": {
						"type": "number",
						"example": 30
					},
					"totalNumber": {
						"type": "string",
						"example": "192978657"
					}
				}
			},
			"Fixed": {
				"type": "object",
				"properties": {
					"ecosystem": {
						"type": "string",
						"example": "1"
					},
					"propertyPrecision": {
						"type": "number",
						"example": 1
					},
					"previousId": {
						"type": "number",
						"example": 1
					},
					"category": {
						"type": "string",
						"example": "Companies"
					},
					"subcategory": {
						"type": "string",
						"example": "Bitcoin Mining"
					},
					"name": {
						"type": "string",
						"example": "Quantum Miner"
					},
					"url": {
						"type": "string",
						"example": "www.example.com"
					},
					"data": {
						"type": "string",
						"example": "Quantum Miner Tokens"
					},
					"amount": {
						"type": "string",
						"example": "100000"
					}
				}
			},
			"Managed": {
				"type": "object",
				"properties": {
					"ecosystem": {
						"type": "string",
						"example": "1"
					},
					"propertyPrecision": {
						"type": "number",
						"example": 1
					},
					"previousId": {
						"type": "number",
						"example": 1
					},
					"category": {
						"type": "string",
						"example": "Companies"
					},
					"subcategory": {
						"type": "string",
						"example": "Bitcoin Mining"
					},
					"name": {
						"type": "string",
						"example": "Quantum Miner"
					},
					"url": {
						"type": "string",
						"example": "www.example.com"
					},
					"data": {
						"type": "string",
						"example": "Quantum Miner Tokens"
					}
				}
			},
			"ParticipateCrowdSale": {
				"type": "object",
				"properties": {
					"amount": {
						"type": "string",
						"example": "1"
					}
				}
			},
			"Revoke": {
				"type": "object",
				"properties": {
					"propertyId": {
						"type": "number",
						"example": 1
					},
					"amount": {
						"type": "string",
						"example": "10"
					},
					"memo": {
						"type": "string",
						"example": ""
					}
				}
			},
			"SendAll": {
				"type": "object",
				"properties": {
					"ecosystem": {
						"type": "number",
						"example": 1
					}
				}
			},
			"SimpleSend": {
				"type": "object",
				"properties": {
					"propertyId": {
						"type": "number",
						"example": 1
					},
					"amount": {
						"type": "string",
						"example": "10"
					}
				}
			},
			"STO": {
				"type": "object",
				"properties": {
					"propertyId": {
						"type": "number",
						"example": 1
					},
					"amount": {
						"type": "string",
						"example": "10"
					},
					"distributionProperty": {
						"type": "number",
						"example": 1
					}
				}
			},
			"Freeze": {
				"type": "object",
				"properties": {
					"toAddress": {
						"type": "string",
						"example": ""
					},
					"propertyId": {
						"type": "number",
						"example": 1
					}
				}
			},
			"Unfreeze": {
				"type": "object",
				"properties": {
					"toAddress": {
						"type": "string",
						"example": ""
					},
					"propertyId": {
						"type": "number",
						"example": 1
					}
				}
			},
			"WHConfirmed": {
				"type": "object",
				"properties": {
					"addresses": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Address"
						},
						"example": []
					},
					"page": {
						"type": "number",
						"example": 1
					}
				}
			}
		}
	},
	"openapi": "3.0.0",
	"info": {
		"description": "rest.bitcoin.com is the REST layer for Bitcoin.com's Cloud. More info: [developer.bitcoin.com/rest](https://developer.bitcoin.com/rest). Chatroom [geni.us/CashDev](http://geni.us/CashDev)",
		"version": "2.0.6",
		"title": "REST",
		"license": {
			"name": "MIT",
			"url": "https://opensource.org/licenses/MIT"
		}
	},
	"paths": {
		"/address/details/{address}": {
			"get": {
				"tags": [
					"address"
				],
				"summary": "Address details single",
				"description": "Returns the details of an address including balance",
				"operationId": "detailsSingle",
				"parameters": [
					{
						"name": "address",
						"in": "path",
						"description": "the address in cashAddr or legacy",
						"required": true,
						"example": "bitcoincash:qzs02v05l7qs5s24srqju498qu55dwuj0cx5ehjm2c",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AddressDetails"
								}
							}
						}
					},
					"400": {
						"description": "Received an invalid Bitcoin Cash address as input.",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Received an invalid Bitcoin Cash address as input."
								}
							}
						}
					}
				}
			}
		},
		"/address/details": {
			"post": {
				"tags": [
					"address"
				],
				"summary": "Address details bulk",
				"description": "Returns the details of multiple addresses",
				"operationId": "detailsBulk",
				"requestBody": {
					"description": "Array of addresses",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Addresses"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AddressDetailsArray"
								}
							}
						}
					},
					"400": {
						"description": "Received an invalid Bitcoin Cash address as input.",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Received an invalid Bitcoin Cash address as input."
								}
							}
						}
					}
				}
			}
		},
		"/address/utxo/{address}": {
			"get": {
				"tags": [
					"address"
				],
				"summary": "Address utxos single",
				"description": "Returns the list of utxo for an address",
				"operationId": "utxoSingle",
				"parameters": [
					{
						"name": "address",
						"in": "path",
						"description": "the address or an array of addresses in cashAddr or legacy",
						"required": true,
						"example": "bitcoincash:qzs02v05l7qs5s24srqju498qu55dwuj0cx5ehjm2c",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AddressUtxo"
								}
							}
						}
					},
					"400": {
						"description": "Received an invalid Bitcoin Cash address as input.",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Received an invalid Bitcoin Cash address as input."
								}
							}
						}
					}
				}
			}
		},
		"/address/utxo": {
			"post": {
				"tags": [
					"address"
				],
				"summary": "Address utxo bulk",
				"description": "Returns the utxo of multiple addresses",
				"operationId": "utxoBulk",
				"requestBody": {
					"description": "Array of addresses",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Addresses"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AddressUtxoArray"
								}
							}
						}
					},
					"400": {
						"description": "Received an invalid Bitcoin Cash address as input.",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Received an invalid Bitcoin Cash address as input."
								}
							}
						}
					}
				}
			}
		},
		"/address/unconfirmed/{address}": {
			"get": {
				"tags": [
					"address"
				],
				"summary": "Unconfirmed transactions for an address",
				"description": "Returns the list of unconfirmed transactions for an address",
				"operationId": "unconfirmedSingle",
				"parameters": [
					{
						"name": "address",
						"in": "path",
						"description": "the address or an array of addresses in cashAddr or legacy",
						"required": true,
						"example": "bitcoincash:qzs02v05l7qs5s24srqju498qu55dwuj0cx5ehjm2c",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AddressUnconfirmed"
								}
							}
						}
					},
					"400": {
						"description": "Received an invalid Bitcoin Cash address as input.",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Received an invalid Bitcoin Cash address as input."
								}
							}
						}
					}
				}
			}
		},
		"/address/unconfirmed": {
			"post": {
				"tags": [
					"address"
				],
				"summary": "Unconfirmed transactions for array of addresses",
				"description": "Returns the list of unconfirmed transactions for an array of addresses",
				"operationId": "unconfirmedBulk",
				"requestBody": {
					"description": "Array of addresses",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Addresses"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AddressUtxoArray"
								}
							}
						}
					},
					"400": {
						"description": "Received an invalid Bitcoin Cash address as input.",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Received an invalid Bitcoin Cash address as input."
								}
							}
						}
					}
				}
			}
		},
		"/address/transactions/{address}": {
			"get": {
				"tags": [
					"address"
				],
				"summary": "Transactions for an address",
				"description": "Returns the list of transactions for an address",
				"operationId": "transactionsSingle",
				"parameters": [
					{
						"name": "address",
						"in": "path",
						"description": "the address in cashAddr or legacy",
						"required": true,
						"example": "bitcoincash:qzs02v05l7qs5s24srqju498qu55dwuj0cx5ehjm2c",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation"
					},
					"400": {
						"description": "Invalid value/s - Null"
					}
				}
			}
		},
		"/address/transactions": {
			"post": {
				"tags": [
					"address"
				],
				"summary": "Transactions for an array of addresses",
				"description": "Returns the list of transactions for an array of addresses",
				"operationId": "transactionsBulk",
				"requestBody": {
					"description": "Array of addresses",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Addresses"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful operation"
					},
					"400": {
						"description": "Received an invalid Bitcoin Cash address as input.",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Received an invalid Bitcoin Cash address as input."
								}
							}
						}
					}
				}
			}
		},
		"/block/detailsByHash/{hash}": {
			"get": {
				"tags": [
					"block"
				],
				"summary": "Block details single",
				"description": "Details about a single block by hash",
				"operationId": "detailsHashSingle",
				"parameters": [
					{
						"name": "hash",
						"in": "path",
						"description": "Block hash",
						"required": true,
						"example": "000000000000000005e14d3f9fdfb70745308706615cfa9edca4f4558332b201",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BlockDetails"
								}
							}
						}
					},
					"400": {
						"description": "Received an invalid block hash.",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Received an invalid block hash."
								}
							}
						}
					}
				}
			}
		},
		"/block/detailsByHash": {
			"post": {
				"tags": [
					"block"
				],
				"summary": "Block details bulk",
				"description": "Details about multiple blocks by hashes",
				"operationId": "detailsHashBulk",
				"requestBody": {
					"description": "Array of hashes",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/BlockHashes"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BlockDetails"
								}
							}
						}
					},
					"400": {
						"description": "Received an invalid block hash.",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Received an invalid block hash."
								}
							}
						}
					}
				}
			}
		},
		"/block/detailsByHeight/{height}": {
			"get": {
				"tags": [
					"block"
				],
				"summary": "Block details single",
				"description": "Details about a single block by height",
				"operationId": "etailsHeightSingle",
				"parameters": [
					{
						"name": "height",
						"in": "path",
						"description": "Block height",
						"required": true,
						"example": "500000",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BlockDetails"
								}
							}
						}
					},
					"400": {
						"description": "Received an invalid block height.",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Received an invalid block height."
								}
							}
						}
					}
				}
			}
		},
		"/block/detailsByHeight": {
			"post": {
				"tags": [
					"block"
				],
				"summary": "Block details bulk",
				"description": "Bulk details about blocks by heights",
				"operationId": "detailsHeightBulk",
				"requestBody": {
					"description": "Array of heights",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/BlockHeights"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BlockDetails"
								}
							}
						}
					},
					"400": {
						"description": "Received an invalid block height.",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Received an invalid block height."
								}
							}
						}
					}
				}
			}
		},
		"/blockchain/getBestBlockHash": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Hash of the best block in the longest blockchain.",
				"description": "Returns the hash of the best (tip) block in the longest blockchain.",
				"operationId": "getBestBlockHash",
				"responses": {
					"200": {
						"description": "successful response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BestBlockHash"
								}
							}
						}
					}
				}
			}
		},
		"/blockchain/getBlockchainInfo": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Info regarding blockchain processing",
				"description": "Returns an object containing various state info regarding blockchain processing.",
				"operationId": "getBlockchainInfo",
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BlockchainInfo"
								}
							}
						}
					}
				}
			}
		},
		"/blockchain/getBlockCount": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Number of blocks in the longest blockchain.",
				"description": "Returns the number of blocks in the longest blockchain.",
				"operationId": "getBlockCount",
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BlockCount"
								}
							}
						}
					}
				}
			}
		},
		"/blockchain/getBlockHeader/{hash}": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Information about blockheader hash",
				"description": "If verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'. If verbose is true, returns an Object with information about blockheader hash.",
				"operationId": "getBlockHeaderSingle",
				"parameters": [
					{
						"name": "hash",
						"in": "path",
						"description": "the block hash",
						"required": true,
						"example": "000000000000000005e14d3f9fdfb70745308706615cfa9edca4f4558332b201",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "verbose",
						"in": "query",
						"description": "true for a json object, false for the hex encoded data",
						"required": false,
						"example": true,
						"schema": {
							"type": "boolean"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BlockHeader"
								}
							}
						}
					},
					"400": {
						"description": "Block not found",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Block not found"
								}
							}
						}
					}
				}
			}
		},
		"/blockchain/getBlockHeader": {
			"post": {
				"tags": [
					"blockchain"
				],
				"summary": "Bulk information about blockheader hash",
				"description": "Bulk information about blockheader hash",
				"operationId": "getBlockHeaderBulk",
				"requestBody": {
					"description": "Array of hashes",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Hashes"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BlockHeader"
								}
							}
						}
					},
					"400": {
						"description": "Block not found",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Block not found"
								}
							}
						}
					}
				}
			}
		},
		"/blockchain/getChainTips": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Information about all known tips in the block tree",
				"description": "Return information about all known tips in the block tree, including the main chain as well as orphaned branches.",
				"operationId": "getChainTips",
				"responses": {
					"200": {
						"description": "successful operation"
					}
				}
			}
		},
		"/blockchain/getDifficulty": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Proof-of-work difficulty",
				"description": "Returns the proof-of-work difficulty as a multiple of the minimum difficulty.",
				"operationId": "getDifficulty",
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Difficulty"
								}
							}
						}
					}
				}
			}
		},
		"/blockchain/getMempoolEntry/{txid}": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Mempool data for transaction",
				"description": "Returns mempool data for given transaction",
				"operationId": "getMempoolEntrySingle",
				"parameters": [
					{
						"name": "txid",
						"in": "path",
						"description": "the transaction id (must be in mempool)",
						"required": true,
						"example": "fe28050b93faea61fa88c4c630f0e1f0a1c24d0082dd0e10d369e13212128f33",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation"
					},
					"400": {
						"description": "Transaction not in mempool"
					}
				}
			}
		},
		"/blockchain/getMempoolEntry": {
			"post": {
				"tags": [
					"blockchain"
				],
				"summary": "Mempool data for transaction",
				"description": "Returns mempool data for given transaction",
				"operationId": "getMempoolEntryBulk",
				"requestBody": {
					"description": "Array of txids",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Txids"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful operation"
					},
					"400": {
						"description": "Transaction not in mempool"
					}
				}
			}
		},
		"/blockchain/getMempoolInfo": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "The active state of the TX memory pool.",
				"description": "Returns details on the active state of the TX memory pool.",
				"operationId": "getMempoolInfo",
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MempoolInfo"
								}
							}
						}
					}
				}
			}
		},
		"/blockchain/getRawMempool": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "All transaction ids in memory pool.",
				"description": "Returns all transaction ids in memory pool as a json array of string transaction ids.",
				"operationId": "getRawMempool",
				"parameters": [
					{
						"name": "verbose",
						"in": "query",
						"description": "True for a json object, false for array of transaction ids",
						"required": false,
						"example": true,
						"schema": {
							"type": "boolean"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RawMempool"
								}
							}
						}
					}
				}
			}
		},
		"/blockchain/getTxOut/{txid}/{n}": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Details about unspent transaction output.",
				"description": "Returns details about an unspent transaction output.",
				"operationId": "getTxOut",
				"parameters": [
					{
						"name": "txid",
						"in": "path",
						"description": "the transaction id",
						"required": true,
						"example": "fe28050b93faea61fa88c4c630f0e1f0a1c24d0082dd0e10d369e13212128f33",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "n",
						"in": "path",
						"description": "vout number",
						"required": true,
						"example": 0,
						"schema": {
							"type": "number",
							"default": 0
						}
					},
					{
						"name": "mempool",
						"in": "query",
						"description": "Whether to include the mempool",
						"required": false,
						"example": "false",
						"schema": {
							"type": "boolean",
							"default": false
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation"
					},
					"400": {
						"description": "Invalid value/s - Null"
					}
				}
			}
		},
		"/blockchain/getTxOutProof/{txid}": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Hex-encoded proof that single txid was included.",
				"description": "Returns a hex-encoded proof that 'txid' was included in a block.",
				"operationId": "getTxOutProofSingle",
				"parameters": [
					{
						"name": "txid",
						"in": "path",
						"description": "a txid string",
						"example": "bbda45af0ba57e28866995c67a53c225336fddd14eb3dc87f2f3500fd61c8585",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation"
					},
					"400": {
						"description": "Invalid tag value"
					}
				}
			}
		},
		"/blockchain/getTxOutProof": {
			"post": {
				"tags": [
					"blockchain"
				],
				"summary": "Hex-encoded proof that multiple txids wwere included.",
				"description": "Returns a hex-encoded proof that multiple txids were included in a block.",
				"operationId": "getTxOutProofBulk",
				"requestBody": {
					"description": "Array of txids",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Txids"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful operation"
					},
					"400": {
						"description": "Invalid tag value"
					}
				}
			}
		},
		"/blockchain/verifyTxOutProof/{proof}": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Verify that a single proof points to a transaction in a block",
				"description": "Verifies that a proof points to a transaction in a block, returning the transaction it commits to and throwing an RPC error if the block is not in our best chain",
				"operationId": "verifyTxOutProofSingle",
				"parameters": [
					{
						"name": "proof",
						"in": "path",
						"description": "The hex-encoded proof generated by gettxoutproof",
						"example": "010000007de867cc8adc5cc8fb6b898ca4462cf9fd667d7830a275277447e60800000000338f121232e169d3100edd82004dc2a1f0e1f030c6c488fa61eafa930b0528fe021f7449ffff001d36b4af9a0100000001338f121232e169d3100edd82004dc2a1f0e1f030c6c488fa61eafa930b0528fe0101",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation"
					},
					"400": {
						"description": "Invalid tag value"
					}
				}
			}
		},
		"/blockchain/verifyTxOutProof": {
			"post": {
				"tags": [
					"blockchain"
				],
				"summary": "Verify that bulk proofs point to transactions in a block",
				"description": "Verifies that bulk proofs point to transactions in a block",
				"operationId": "verifyTxOutProofBulk",
				"requestBody": {
					"description": "Array of proofs",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Proofs"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful operation"
					},
					"400": {
						"description": "Invalid tag value"
					}
				}
			}
		},
		"/control/getInfo": {
			"get": {
				"tags": [
					"control"
				],
				"summary": "Various state info.",
				"description": "Returns an object containing various state info.",
				"operationId": "getInfo",
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Info"
								}
							}
						}
					}
				}
			}
		},
		"/mining/getMiningInfo": {
			"get": {
				"tags": [
					"mining"
				],
				"summary": "Returns a json object containing mining-related information.",
				"description": "",
				"operationId": "getMiningInfo",
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MiningInfo"
								}
							}
						}
					}
				}
			}
		},
		"/mining/getNetworkHashps": {
			"get": {
				"tags": [
					"mining"
				],
				"summary": "Estimated network hashes per second",
				"description": "Returns the estimated network hashes per second based on the last n blocks. Pass in [blocks] to override # of blocks, -1 specifies since last difficulty change. Pass in [height] to estimate the network speed at the time when a certain block was found.",
				"operationId": "getNetworkHashps",
				"parameters": [
					{
						"in": "query",
						"name": "nblocks",
						"description": "the number of blocks, or -1 for blocks since last difficulty change.",
						"required": false,
						"example": 120,
						"schema": {
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "height",
						"description": "to estimate at the time of the given height.",
						"required": false,
						"example": -1,
						"schema": {
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NetworkHashps"
								}
							}
						}
					}
				}
			}
		},
		"/rawtransactions/decodeRawTransaction/{hex}": {
			"get": {
				"tags": [
					"rawtransactions"
				],
				"summary": "Return the hex encoded transaction.",
				"description": "Return a JSON object representing the serialized, hex-encoded transaction.",
				"operationId": "decodeRawTransactionSingle",
				"parameters": [
					{
						"in": "path",
						"name": "hex",
						"description": "The transaction hex string",
						"required": true,
						"example": "01000000013ba3edfd7a7b12b27ac72c3e67768f617fc81bc3888a51323a9fb8aa4b1e5e4a000000006a4730440220540986d1c58d6e76f8f05501c520c38ce55393d0ed7ed3c3a82c69af04221232022058ea43ed6c05fec0eccce749a63332ed4525460105346f11108b9c26df93cd72012103083dfc5a0254613941ddc91af39ff90cd711cdcde03a87b144b883b524660c39ffffffff01807c814a000000001976a914d7e7c4e0b70eaa67ceff9d2823d1bbb9f6df9a5188ac00000000",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DecodeRawTransaction"
								}
							}
						}
					},
					"400": {
						"description": "TX decode failed"
					}
				}
			}
		},
		"/rawtransactions/decodeRawTransaction": {
			"post": {
				"tags": [
					"rawtransactions"
				],
				"summary": "Return bulk hex encoded transaction.",
				"description": "Return bulk hex encoded transaction.",
				"operationId": "decodeRawTransactionBulk",
				"requestBody": {
					"description": "Array of hexes",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Hexes"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DecodeRawTransaction"
								}
							}
						}
					},
					"400": {
						"description": "TX decode failed"
					}
				}
			}
		},
		"/rawtransactions/decodeScript/{hex}": {
			"get": {
				"tags": [
					"rawtransactions"
				],
				"summary": "Decode a hex-encoded script.",
				"description": "Decode a hex-encoded script.",
				"operationId": "decodeScript",
				"parameters": [
					{
						"in": "path",
						"name": "hex",
						"description": "The hex encoded script",
						"required": true,
						"example": "4830450221009a51e00ec3524a7389592bc27bea4af5104a59510f5f0cfafa64bbd5c164ca2e02206c2a8bbb47eabdeed52f17d7df668d521600286406930426e3a9415fe10ed592012102e6e1423f7abde8b70bca3e78a7d030e5efabd3eb35c19302542b5fe7879c1a16",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DecodeScript"
								}
							}
						}
					},
					"400": {
						"description": "Argument must be hexadecimal string"
					}
				}
			}
		},
		"/rawtransactions/getRawTransaction/{txid}": {
			"get": {
				"tags": [
					"rawtransactions"
				],
				"summary": "Return the raw transaction data.",
				"description": "return the raw transaction data. If verbose is 'true', returns an Object with information about 'txid'. If verbose is 'false' or omitted, returns a string that is serialized, hex-encoded data for 'txid'.",
				"operationId": "getRawTransaction",
				"parameters": [
					{
						"in": "path",
						"name": "txid",
						"description": "The transaction id",
						"required": true,
						"example": "fe28050b93faea61fa88c4c630f0e1f0a1c24d0082dd0e10d369e13212128f33",
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "verbose",
						"description": "If false, return a string, otherwise return a json object",
						"required": true,
						"example": true,
						"schema": {
							"type": "boolean"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GetRawTransaction"
								}
							}
						}
					},
					"400": {
						"description": "Transaction not found"
					}
				}
			}
		},
		"/rawtransactions/sendRawTransaction": {
			"post": {
				"tags": [
					"rawtransactions"
				],
				"summary": "Submits multiple raw transactions to local node and network.",
				"description": "Submits multiple raw transaction (serialized, hex-encoded) to local node and network.",
				"operationId": "sendRawTransaction",
				"requestBody": {
					"description": "Array of raw tx hexes",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Hexes"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful operation"
					},
					"400": {
						"description": "Transaction not found"
					}
				}
			}
		},
		"/rawtransactions/create/{inputs}/{outputs}": {
			"post": {
				"tags": [
					"rawtransactions"
				],
				"summary": "createRawTxChange",
				"description": "Create a transaction spending the given inputs and creating new outputs. API Reference: https://developer.bitcoin.com/wormhole/docs/rawTransactions",
				"operationId": "rawTransactionsCreate",
				"parameters": [
					{
						"name": "inputs",
						"in": "path",
						"description": "A json array of json objects",
						"required": true,
						"example": "[{\"txid\":\"myid\",\"vout\":0}]",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "outputs",
						"in": "path",
						"description": "A json object with outputs",
						"required": true,
						"example": "{}",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "locktime",
						"in": "query",
						"description": "Raw locktime. Non-0 value also locktime-activates inputs",
						"required": false,
						"example": 0,
						"schema": {
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					},
					"400": {
						"description": "Received an invalid block height.",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Received an invalid block height."
								}
							}
						}
					}
				}
			}
		},
		"/rawtransactions/change/{rawTx}/{prevTxs}/{destination}/{fee}": {
			"post": {
				"tags": [
					"rawtransactions"
				],
				"summary": "createRawTxChange",
				"description": "Adds a change output to the transaction.API Reference: https://developer.bitcoin.com/wormhole/docs/rawTransactions",
				"operationId": "rawTransactionsChange",
				"parameters": [
					{
						"name": "rawTx",
						"in": "path",
						"description": "The raw transaction to extend",
						"required": true,
						"example": "0100000001b15ee60431ef57ec682790dec5a3c0d83a0c360633ea8308fbf6d5fc10a779670400000000ffffffff025c0d00000000000047512102f3e471222bb57a7d416c82bf81c627bfcd2bdc47f36e763ae69935bba4601ece21021580b888ff56feb27f17f08802ebed26258c23697d6a462d43fc13b565fda2dd52aeaa0a0000000000001976a914946cb2e08075bcbaf157e47bcb67eb2b2339d24288ac00000000",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "prevTxs",
						"in": "path",
						"description": "A JSON array of transaction inputs",
						"required": true,
						"example": "[{\"txid\":\"6779a710fcd5f6fb0883ea3306360c3ad8c0a3c5de902768ec57ef3104e65eb1\",\"vout\":4,\"scriptPubKey\":\"76a9147b25205fd98d462880a3e5b0541235831ae959e588ac\",\"value\":0.00068257}]",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "destination",
						"in": "path",
						"description": "The destination for the change",
						"required": true,
						"example": "bchtest:qq2j9gp97gm9a6lwvhxc4zu28qvqm0x4j5e72v7ejg",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fee",
						"in": "path",
						"description": "The desired transaction fees",
						"required": true,
						"example": 0.000035,
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "position",
						"in": "query",
						"description": "The position of the change output (default: first position)",
						"required": false,
						"example": 1,
						"schema": {
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					},
					"400": {
						"description": "Received an invalid block height.",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Received an invalid block height."
								}
							}
						}
					}
				}
			}
		},
		"/rawtransactions/input/{rawTx}/{txid}/{n}": {
			"post": {
				"tags": [
					"rawtransactions"
				],
				"summary": "createRawTxInput",
				"description": "Adds a transaction input to the transaction.API Reference: https://developer.bitcoin.com/wormhole/docs/rawTransactions",
				"operationId": "rawTransactionsInput",
				"parameters": [
					{
						"name": "rawTx",
						"in": "path",
						"description": "The raw transaction to extend",
						"required": true,
						"example": "01000000000000000000",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "txid",
						"in": "path",
						"description": "The hash of the input transaction",
						"required": true,
						"example": "b006729017df05eda586df9ad3f8ccfee5be340aadf88155b784d1fc0e8342ee",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "n",
						"in": "path",
						"description": "The index of the transaction output used as input",
						"required": true,
						"example": 0,
						"schema": {
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/rawtransactions/opReturn/{rawTx}/{payload}": {
			"post": {
				"tags": [
					"rawtransactions"
				],
				"summary": "createRawTxOpReturn",
				"description": "Adds a payload with class C (op-return) encoding to the transaction.API Reference: https://developer.bitcoin.com/wormhole/docs/rawTransactions",
				"operationId": "rawTransactionsOpReturn",
				"parameters": [
					{
						"name": "rawTx",
						"in": "path",
						"description": "The raw transaction to extend",
						"required": true,
						"example": "01000000000000000000",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "payload",
						"in": "path",
						"description": "The hex-encoded payload to add",
						"required": true,
						"example": "00000000000000020000000006dac2c0",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/rawtransactions/reference/{rawTx}/{destination}": {
			"post": {
				"tags": [
					"rawtransactions"
				],
				"summary": "createRawTxReference",
				"description": "Adds a reference output to the transaction. API Reference: https://developer.bitcoin.com/wormhole/docs/rawTransactions",
				"operationId": "rawTransactionsReference",
				"parameters": [
					{
						"name": "rawTx",
						"in": "path",
						"description": "The raw transaction to extend",
						"required": true,
						"example": "0100000001a7a9402ecd77f3c9f745793c9ec805bfa2e14b89877581c734c774864247e6f50400000000ffffffff03aa0a0000000000001976a9146d18edfe073d53f84dd491dae1379f8fb0dfe5d488ac5c0d0000000000004751210252ce4bdd3ce38b4ebbc5a6e1343608230da508ff12d23d85b58c964204c4cef3210294cc195fc096f87d0f813a337ae7e5f961b1c8a18f1f8604a909b3a5121f065b52aeaa0a0000000000001976a914946cb2e08075bcbaf157e47bcb67eb2b2339d24288ac00000000",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "destination",
						"in": "path",
						"description": "The reference address or destination",
						"required": true,
						"example": "bchtest:qq2j9gp97gm9a6lwvhxc4zu28qvqm0x4j5e72v7ejg",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "amount",
						"in": "query",
						"description": "The optional reference amount (minimal by default)",
						"required": false,
						"example": 0.005,
						"schema": {
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/transaction/details/{txid}": {
			"get": {
				"tags": [
					"transaction"
				],
				"summary": "Transaction details single",
				"description": "Details about a single transaction",
				"operationId": "transactionDetailsSingle",
				"parameters": [
					{
						"in": "path",
						"name": "txid",
						"description": "single txid or url encoded array of txids",
						"required": true,
						"example": "fe28050b93faea61fa88c4c630f0e1f0a1c24d0082dd0e10d369e13212128f33",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TransactionDetails"
								}
							}
						}
					},
					"400": {
						"description": "Transaction not found"
					}
				}
			}
		},
		"/transaction/details": {
			"post": {
				"tags": [
					"transaction"
				],
				"summary": "Transaction details bulk",
				"description": "Bulk Details about a transaction",
				"operationId": "transactionDetailsBulk",
				"requestBody": {
					"description": "Array of txids",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Txids"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TransactionDetails"
								}
							}
						}
					},
					"400": {
						"description": "Transaction not found"
					}
				}
			}
		},
		"/util/validateAddress/{address}": {
			"get": {
				"tags": [
					"util"
				],
				"summary": "Information about single bitcoin cash address.",
				"description": "Return information about single bitcoin cash address.",
				"operationId": "validateAddressSingle",
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"description": "The bitcoin address to validate",
						"required": true,
						"example": "bitcoincash:qzs02v05l7qs5s24srqju498qu55dwuj0cx5ehjm2c",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidateAddress"
								}
							}
						}
					},
					"400": {
						"description": "Invalid Address"
					}
				}
			}
		},
		"/util/validateAddress": {
			"post": {
				"tags": [
					"util"
				],
				"summary": "Information about bulk bitcoin cash addresses.",
				"description": "Return information about bulk bitcoin cash addresses.",
				"operationId": "validateAddressBulk",
				"requestBody": {
					"description": "Array of Addresses",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Addresses"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidateAddress"
								}
							}
						}
					},
					"400": {
						"description": "Invalid Address"
					}
				}
			}
		},
		"/rawtransactions/decodeTransaction/{rawTx}": {
			"get": {
				"tags": [
					"rawtransactions"
				],
				"summary": "decodeTransaction",
				"description": "Decodes an Omni transaction. API Reference: https://developer.bitcoin.com/wormhole/docs/rawTransactions",
				"operationId": "decodeTransaction",
				"parameters": [
					{
						"name": "rawTx",
						"in": "path",
						"description": "The raw transaction to decode",
						"required": true,
						"example": "0200000001ee6dbb4d43427f5e35ecc3b6eeecfffeee22650e1d0a9846be1a09cee1b7e490020000006a47304402204cbf80c5eb831b4276e3bbf5b85bb64a05251e120f6357ca145651bdf97de5e5022037e448281add7144b65f3943e8654a901daf6f285feb6b63cc928cbe64b8a50e412102df0a79c642da671cd17dcd80b1e506f3b42b7c92a40b3067b5754eb40fc85d02ffffffff0329328d00000000001976a914fd542b2f9e06d814dd6c503dc24707e5620d9a7488ac0000000000000000166a1408776863000000000000000100000000b2d05e0022020000000000001976a91472ef3365835cd4e791ea3511d96f1eba32472a9988ac00000000",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/dataRetrieval/balance/{address}/{propertyId}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "balance",
				"description": "Returns the token balance for a given address and property.",
				"operationId": "balance",
				"parameters": [
					{
						"name": "address",
						"in": "path",
						"description": "The address",
						"required": true,
						"example": "bitcoincash:qzs02v05l7qs5s24srqju498qu55dwuj0cx5ehjm2c",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "propertyId",
						"in": "path",
						"description": "The property identifier",
						"required": true,
						"example": "1",
						"schema": {
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					},
					"400": {
						"description": "Invalid address. Note: use cashAddress"
					}
				}
			}
		},
		"/dataRetrieval/balancesForAddress/{address}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "balancesForAddress",
				"description": "Returns a list of all token balances for a given address. API reference: https://developer.bitcoin.com/wormhole/docs/dataRetrieval",
				"operationId": "balancesForAddress",
				"parameters": [
					{
						"name": "address",
						"in": "path",
						"description": "The address",
						"required": true,
						"example": "bitcoincash:qpew7vm9sdwdfeu3ag63rkt0r6ary3e2ny5p8lsfpn",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					},
					"400": {
						"description": "Invalid address. Note: use cashAddress"
					}
				}
			}
		},
		"/dataRetrieval/balancesForId/{propertyId}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "balanceForId",
				"description": "Returns a list of token balances for a given currency or property identifier. API Reference: https://developer.bitcoin.com/wormhole/docs/dataRetrieval",
				"operationId": "balancesForId",
				"parameters": [
					{
						"name": "propertyId",
						"in": "path",
						"description": "The property identifier",
						"required": true,
						"example": 1,
						"schema": {
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					},
					"400": {
						"description": "Invalid address. Note: use cashAddress"
					}
				}
			}
		},
		"/dataRetrieval/balancesHash/{propertyId}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "balancesHash",
				"description": "Returns a hash of the balances for the property.",
				"operationId": "balancesHash",
				"parameters": [
					{
						"name": "propertyId",
						"in": "path",
						"description": "The property to hash balances for",
						"required": true,
						"example": 1,
						"schema": {
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					},
					"400": {
						"description": "JSON value is not an integer as expected"
					}
				}
			}
		},
		"/dataRetrieval/crowdSale/{propertyId}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "crowdSale",
				"description": "Returns information about a crowdsale.",
				"operationId": "crowdSale",
				"parameters": [
					{
						"name": "propertyId",
						"in": "path",
						"description": "The identifier of the crowdsale",
						"required": true,
						"example": 197,
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "verbose",
						"in": "query",
						"description": "List crowdsale participants (default: false)",
						"required": false,
						"schema": {
							"type": "boolean"
						},
						"example": true
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					},
					"400": {
						"description": "JSON value is not an integer as expected"
					}
				}
			}
		},
		"/dataRetrieval/currentConsensusHash": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "currentConsensusHash",
				"description": "Returns the consensus hash for all balances for the current block.",
				"operationId": "currentConsensusHash",
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/dataRetrieval/grants/{propertyId}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "grants",
				"description": "Returns information about granted and revoked units of managed tokens.",
				"operationId": "grants",
				"parameters": [
					{
						"name": "propertyId",
						"in": "path",
						"description": "The identifier of the managed tokens to lookup",
						"required": true,
						"example": 196,
						"schema": {
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					},
					"400": {
						"description": "JSON value is not an integer as expected"
					}
				}
			}
		},
		"/dataRetrieval/info": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "info",
				"description": "Returns various state information of the client and protocol.",
				"operationId": "info",
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/dataRetrieval/payload/{txid}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "payload",
				"description": "Get the payload for an Omni transaction.",
				"operationId": "payload",
				"parameters": [
					{
						"name": "txid",
						"in": "path",
						"description": "The hash of the transaction to retrieve payload",
						"required": true,
						"example": "bbda45af0ba57e28866995c67a53c225336fddd14eb3dc87f2f3500fd61c8585",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					},
					"400": {
						"description": "Received an invalid txid as input."
					}
				}
			}
		},
		"/dataRetrieval/property/{propertyId}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "property",
				"description": "Returns details for about the tokens or smart property to lookup.",
				"operationId": "property",
				"parameters": [
					{
						"name": "propertyId",
						"in": "path",
						"description": "The identifier of the tokens or property",
						"required": true,
						"example": 1,
						"schema": {
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					},
					"400": {
						"description": "JSON value is not an integer as expected"
					}
				}
			}
		},
		"/dataRetrieval/seedBlocks/{startBlock}/{endBlock}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "seedBlocks",
				"description": "Returns a list of blocks containing Omni transactions for use in seed block filtering.",
				"operationId": "seedBlocks",
				"parameters": [
					{
						"name": "startBlock",
						"in": "path",
						"description": "The first block to look for Omni transactions (inclusive)",
						"required": true,
						"example": 560000,
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "endBlock",
						"in": "path",
						"description": "The last block to look for Omni transactions (inclusive)",
						"required": true,
						"example": 560100,
						"schema": {
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					},
					"400": {
						"description": "JSON value is not an integer as expected"
					}
				}
			}
		},
		"/dataRetrieval/STO/{txid}/{recipientFilter}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "STO",
				"description": "Get information and recipients of a send-to-owners transaction.",
				"operationId": "drSTO",
				"parameters": [
					{
						"name": "txid",
						"in": "path",
						"description": "The hash of the transaction to lookup",
						"required": true,
						"example": "bbda45af0ba57e28866995c67a53c225336fddd14eb3dc87f2f3500fd61c8585",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "recipientFilter",
						"in": "path",
						"description": "A filter for recipients (wallet by default, '*' for all)",
						"required": true,
						"example": "*",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					},
					"400": {
						"description": "Invalid address. Note: use cashAddress"
					}
				}
			}
		},
		"/dataRetrieval/transaction/{txid}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "transaction",
				"description": "Get detailed information about an Omni transaction.",
				"operationId": "transaction",
				"parameters": [
					{
						"name": "txid",
						"in": "path",
						"description": "The hash of the transaction to lookup",
						"required": true,
						"example": "bbda45af0ba57e28866995c67a53c225336fddd14eb3dc87f2f3500fd61c8585",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					},
					"400": {
						"description": "No information available about transaction"
					}
				}
			}
		},
		"/dataRetrieval/blockTransactions/{index}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "blockTransactions",
				"description": "Lists all Omni transactions in a block.",
				"operationId": "blockTransactions",
				"parameters": [
					{
						"name": "index",
						"in": "path",
						"description": "The block height or block index",
						"required": true,
						"example": 560000,
						"schema": {
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					},
					"400": {
						"description": "JSON value is not an integer as expected"
					}
				}
			}
		},
		"/dataRetrieval/pendingTransactions/{address}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "pendingTransactions",
				"description": "Returns a list of unconfirmed Omni transactions, pending in the memory pool.",
				"operationId": "pendingTransactions",
				"parameters": [
					{
						"name": "address",
						"in": "path",
						"description": "Address filter (default: '' for no filter)",
						"required": false,
						"example": "bitcoincash:qzs02v05l7qs5s24srqju498qu55dwuj0cx5ehjm2c",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					},
					"400": {
						"description": "Invalid address. Note: use cashAddress"
					}
				}
			}
		},
		"/dataRetrieval/properties": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "properties",
				"description": "Lists all tokens or smart properties.",
				"operationId": "properties",
				"parameters": [
					{
						"name": "address",
						"in": "query",
						"description": "address filter (default: '*')",
						"required": false,
						"example": "*",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "count",
						"in": "query",
						"description": "show at most n transactions (default: 10)",
						"required": false,
						"example": 10,
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "skip",
						"in": "query",
						"description": "skip the first n transactions (default: 0)",
						"required": false,
						"example": 0,
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "startBlock",
						"in": "query",
						"description": "first block to begin the search (default: 0)",
						"required": false,
						"example": 0,
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "endBlock",
						"in": "query",
						"description": "last block to include in the search (default: 9999999)",
						"required": false,
						"example": 9999999,
						"schema": {
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/dataRetrieval/frozenBalance/{address}/{propertyId}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "frozenBalance",
				"description": "Returns the frozen token balance for a given address and property.",
				"operationId": "frozenBalance",
				"parameters": [
					{
						"name": "address",
						"in": "path",
						"description": "the address",
						"required": true,
						"example": "bitcoincash:qzs02v05l7qs5s24srqju498qu55dwuj0cx5ehjm2c",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "propertyId",
						"in": "path",
						"description": "the property identifier",
						"required": true,
						"example": 206,
						"schema": {
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/dataRetrieval/frozenBalanceForAddress/{address}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "frozenBalanceForAddress",
				"description": "Returns the frozen token balance for a given address and property.",
				"operationId": "frozenBalanceForAddress",
				"parameters": [
					{
						"name": "address",
						"in": "path",
						"description": "the address",
						"required": true,
						"example": "bitcoincash:qzs02v05l7qs5s24srqju498qu55dwuj0cx5ehjm2c",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/dataRetrieval/frozenBalanceForId/{propertyId}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "frozenBalanceForId",
				"description": "Returns the frozen token balance for a given property.",
				"operationId": "frozenBalanceForId",
				"parameters": [
					{
						"name": "propertyId",
						"in": "path",
						"description": "the Property ID",
						"required": true,
						"example": 206,
						"schema": {
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/dataRetrieval/ERC721AddressTokens/{address}/{propertyId}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "ERC721AddressTokens",
				"description": "Returns details for about the tokens or smart property to lookup.",
				"operationId": "dataRetrievalERC721AddressTokens",
				"parameters": [
					{
						"name": "address",
						"in": "path",
						"description": "the address of the query",
						"required": true,
						"example": "bitcoincash:qzs02v05l7qs5s24srqju498qu55dwuj0cx5ehjm2c",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "propertyId",
						"in": "path",
						"description": "the identifier of the ERC721 property",
						"required": true,
						"example": "0x01",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/dataRetrieval/ERC721PropertyDestroyTokens/{propertyId}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "ERC721PropertyDestroyTokens",
				"description": "Returns details for about the destroy tokens to lookup.",
				"operationId": "dataRetrievalERC721PropertyDestroyTokens",
				"parameters": [
					{
						"name": "propertyId",
						"in": "path",
						"description": "the identifier of the ERC721 property",
						"required": true,
						"example": "0x01",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/dataRetrieval/ERC721PropertyNews/{propertyId}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "ERC721PropertyNews",
				"description": "Returns details for about the tokens or smart property to lookup.",
				"operationId": "dataRetrievalERC721PropertyNews",
				"parameters": [
					{
						"name": "propertyId",
						"in": "path",
						"description": "the identifier of the ERC721 property",
						"required": true,
						"example": "0x01",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/dataRetrieval/ERC721TokenNews/{propertyId}/{tokenId}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "ERC721TokenNews",
				"description": "Returns details for about the tokens or smart property to lookup.",
				"operationId": "dataRetrievalERC721TokenNews",
				"parameters": [
					{
						"name": "propertyId",
						"in": "path",
						"description": "the identifier of the ERC721 property",
						"required": true,
						"example": "0x02",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "tokenId",
						"in": "path",
						"description": "the identifier of the ERC721 token",
						"required": true,
						"example": "0x01",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/dataRetrieval/ownerOfERC721Token/{propertyId}/{tokenId}/{address}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "ownerOfERC721Token",
				"description": "Query whether the Token's owner is the specified address.",
				"operationId": "dataRetrievalOwnerOfERC721Token",
				"parameters": [
					{
						"name": "propertyId",
						"in": "path",
						"description": "the identifier of the ERC721 property",
						"required": true,
						"example": "0x03",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "tokenId",
						"in": "path",
						"description": "the identifier of the ERC721 token",
						"required": true,
						"example": "0x01",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "address",
						"in": "path",
						"description": "query address for the specified ERC721 Token",
						"required": true,
						"example": "bitcoincash:qzs02v05l7qs5s24srqju498qu55dwuj0cx5ehjm2c",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/payloadCreation/burnBCH": {
			"get": {
				"tags": [
					"payloadCreation"
				],
				"summary": "burnBCH",
				"description": "Creates the payload to burn bch to get whc.",
				"operationId": "burnBCH",
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/payloadCreation/changeIssuer": {
			"post": {
				"tags": [
					"payloadCreation"
				],
				"summary": "changeIssuer",
				"description": "Creates the payload to change the issuer on record of the given tokens.",
				"operationId": "changeIssuer",
				"requestBody": {
					"description": "The identifier of the tokens",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PropertyId"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response"
					},
					"500": {
						"description": "Not Found",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Not Found."
								}
							}
						}
					}
				}
			}
		},
		"/payloadCreation/closeCrowdSale": {
			"post": {
				"tags": [
					"payloadCreation"
				],
				"summary": "closeCrowdSale",
				"description": "Creates the payload to manually close a crowdsale.",
				"operationId": "closeCrowdSale",
				"requestBody": {
					"description": "The identifier of the crowdsale to close",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PropertyId"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response"
					},
					"400": {
						"description": "JSON value is not an integer as expected",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "JSON value is not an integer as expected"
								}
							}
						}
					}
				}
			}
		},
		"/payloadCreation/grant": {
			"post": {
				"tags": [
					"payloadCreation"
				],
				"summary": "grant",
				"description": "Creates the payload to issue or grant new units of managed tokens.",
				"operationId": "grant",
				"requestBody": {
					"description": "The identifier of the tokens to grant, amount of tokens to create and text note attached to this transaction",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Grant"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response"
					},
					"400": {
						"description": "Not Found",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Not Found"
								}
							}
						}
					}
				}
			}
		},
		"/payloadCreation/crowdsale": {
			"post": {
				"tags": [
					"payloadCreation"
				],
				"summary": "crowdsale",
				"description": "Creates the payload for a new tokens issuance with crowdsale.",
				"operationId": "crowdsale",
				"requestBody": {
					"description": "",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Crowdsale"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/payloadCreation/fixed": {
			"post": {
				"tags": [
					"payloadCreation"
				],
				"summary": "fixed",
				"description": "Creates the payload for a new tokens issuance with fixed supply.",
				"operationId": "fixed",
				"requestBody": {
					"description": "",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Fixed"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/payloadCreation/managed": {
			"post": {
				"tags": [
					"payloadCreation"
				],
				"summary": "managed",
				"description": "Creates the payload for a new tokens issuance with manageable supply.",
				"operationId": "managed",
				"requestBody": {
					"description": "",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Managed"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response"
					},
					"400": {
						"description": "Received an invalid Bitcoin Cash address as input."
					}
				}
			}
		},
		"/payloadCreation/participateCrowdSale": {
			"post": {
				"tags": [
					"payloadCreation"
				],
				"summary": "participateCrowdSale",
				"description": "Create the payload for a participate crowdsale transaction",
				"operationId": "participateCrowdSale",
				"requestBody": {
					"description": "",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ParticipateCrowdSale"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/payloadCreation/revoke": {
			"post": {
				"tags": [
					"payloadCreation"
				],
				"summary": "revoke",
				"description": "Creates the payload to revoke units of managed tokens.",
				"operationId": "revoke",
				"requestBody": {
					"description": "",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Revoke"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/payloadCreation/sendAll": {
			"post": {
				"tags": [
					"payloadCreation"
				],
				"summary": "sendAll",
				"description": "Create the payload for a send all transaction.",
				"operationId": "sendAll",
				"requestBody": {
					"description": "",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SendAll"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/payloadCreation/simpleSend": {
			"post": {
				"tags": [
					"payloadCreation"
				],
				"summary": "simpleSend",
				"description": "Create the payload for a simple send transaction.",
				"operationId": "simpleSend",
				"requestBody": {
					"description": "",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SimpleSend"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/payloadCreation/STO": {
			"post": {
				"tags": [
					"payloadCreation"
				],
				"summary": "STO",
				"description": "Creates the payload for a send-to-owners transaction",
				"operationId": "STO",
				"requestBody": {
					"description": "",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/STO"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/payloadCreation/freeze": {
			"post": {
				"tags": [
					"payloadCreation"
				],
				"summary": "freeze",
				"description": "Creates the payload for a freeze transaction",
				"operationId": "freeze",
				"requestBody": {
					"description": "",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Freeze"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/payloadCreation/unfreeze": {
			"post": {
				"tags": [
					"payloadCreation"
				],
				"summary": "unfreeze",
				"description": "Creates the payload for an unfreeze transaction",
				"operationId": "unfreeze",
				"requestBody": {
					"description": "",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Unfreeze"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/wormhole/transaction/confirmed": {
			"post": {
				"tags": [
					"wormhole"
				],
				"summary": "Confirmed wormhole transactions",
				"description": "Confirmed wormhole transactions",
				"operationId": "whTxConfirmed",
				"requestBody": {
					"description": "Array of addresses",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/WHConfirmed"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/slp/list": {
			"get": {
				"tags": [
					"slp"
				],
				"summary": "list",
				"description": "List all SLP tokens",
				"operationId": "slpList",
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/slp/list/{tokenId}": {
			"get": {
				"tags": [
					"slp"
				],
				"summary": "list token",
				"description": "List single SLP token by id",
				"operationId": "slpListToken",
				"parameters": [
					{
						"name": "tokenId",
						"in": "path",
						"description": "The token id",
						"required": true,
						"example": "259908ae44f46ef585edef4bcc1e50dc06e4c391ac4be929fae27235b8158cf1",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/slp/address/convert/{address}": {
			"get": {
				"tags": [
					"slp"
				],
				"summary": "convert address to slpAddr, cashAddr and legacy",
				"description": "convert address to slpAddr, cashAddr and legacy",
				"operationId": "slpAddressConvert",
				"parameters": [
					{
						"name": "address",
						"in": "path",
						"description": "The slp address",
						"required": true,
						"example": "simpleledger:qz9tzs6d5097ejpg279rg0rnlhz546q4fsnck9wh5m",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/slp/validate": {
			"post": {
				"tags": [
					"slp"
				],
				"summary": "Validate multiple txids",
				"description": "Validate multiple txids",
				"operationId": "slpValidate",
				"requestBody": {
					"description": "",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Txids"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		}
	},
	"servers": [
		{
			"url": "/v2"
		}
	],
	"tags": [
		{
			"name": "address",
			"description": "Address details and utxo",
			"externalDocs": {
				"description": "Find out more",
				"url": "https://developer.bitcoin.com/rest/docs/address"
			}
		},
		{
			"name": "block",
			"description": "Block Details",
			"externalDocs": {
				"description": "Find out more",
				"url": "https://developer.bitcoin.com/rest/docs/block"
			}
		},
		{
			"name": "blockchain",
			"description": "Interacting w/ the BCH Blockchain",
			"externalDocs": {
				"description": "Find out more",
				"url": "https://developer.bitcoin.com/rest/docs/blockchain"
			}
		},
		{
			"name": "control",
			"description": "Control your blockchain",
			"externalDocs": {
				"description": "Find out more",
				"url": "https://developer.bitcoin.com/rest/docs/control"
			}
		},
		{
			"name": "mining",
			"description": "Mining w/ the BCH Blockchain",
			"externalDocs": {
				"description": "Find out more",
				"url": "https://developer.bitcoin.com/rest/docs/mining"
			}
		},
		{
			"name": "rawtransactions",
			"description": "Create transactions to be transmitted to the network.",
			"externalDocs": {
				"description": "Find out more",
				"url": "https://developer.bitcoin.com/rest/docs/rawtransactions"
			}
		},
		{
			"name": "transaction",
			"description": "Transaction details.",
			"externalDocs": {
				"description": "Find out more",
				"url": "https://developer.bitcoin.com/rest/docs/rawtransactions"
			}
		},
		{
			"name": "util",
			"description": "Bitcoin Cash utilities.",
			"externalDocs": {
				"description": "Find out more",
				"url": "https://developer.bitcoin.com/rest/docs/util"
			}
		},
		{
			"name": "dataRetrieval",
			"description": "dataRetrieval",
			"externalDocs": {
				"description": "Find out more",
				"url": "https://developer.bitcoin.com/rest/docs/dataRetrieval"
			}
		},
		{
			"name": "payloadCreation",
			"description": "payloadCreation",
			"externalDocs": {
				"description": "Find out more",
				"url": "https://developer.bitcoin.com/rest/docs/payloadCreation"
			}
		},
		{
			"name": "wormhole",
			"description": "wormhole",
			"externalDocs": {
				"description": "Find out more",
				"url": "https://developer.bitcoin.com/rest/docs/wormhole"
			}
		}
	]
}