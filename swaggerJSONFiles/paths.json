{
  "paths": {
    "/address/details/{address}": {
      "get": {
        "tags": ["address"],
        "summary": "Address details single",
        "description": "Returns the details of an address including balance",
        "operationId": "detailsSingle",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "the address in cashAddr or legacy",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressDetails"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid Bitcoin Cash address as input.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid Bitcoin Cash address as input."
                }
              }
            }
          }
        }
      }
    },
    "/address/details": {
      "post": {
        "tags": ["address"],
        "summary": "Address details bulk",
        "description": "Returns the details of multiple addresses",
        "operationId": "detailsBulk",
        "requestBody": {
          "description": "Array of addresses",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Addresses"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressDetailsArray"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid Bitcoin Cash address as input.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid Bitcoin Cash address as input."
                }
              }
            }
          }
        }
      }
    },
    "/address/utxo/{address}": {
      "get": {
        "tags": ["address"],
        "summary": "Address utxos single",
        "description": "Returns the list of utxo for an address",
        "operationId": "utxoSingle",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "the address or an array of addresses in cashAddr or legacy",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressUtxo"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid Bitcoin Cash address as input.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid Bitcoin Cash address as input."
                }
              }
            }
          }
        }
      }
    },
    "/address/utxo": {
      "post": {
        "tags": ["address"],
        "summary": "Address utxo bulk",
        "description": "Returns the utxo of multiple addresses",
        "operationId": "utxoBulk",
        "requestBody": {
          "description": "Array of addresses",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Addresses"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressUtxoArray"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid Bitcoin Cash address as input.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid Bitcoin Cash address as input."
                }
              }
            }
          }
        }
      }
    },
    "/address/unconfirmed/{address}": {
      "get": {
        "tags": ["address"],
        "summary": "Unconfirmed transactions for an address",
        "description": "Returns the list of unconfirmed transactions for an address",
        "operationId": "unconfirmedSingle",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "the address or an array of addresses in cashAddr or legacy",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressUnconfirmed"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid Bitcoin Cash address as input.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid Bitcoin Cash address as input."
                }
              }
            }
          }
        }
      }
    },
    "/address/unconfirmed": {
      "post": {
        "tags": ["address"],
        "summary": "Unconfirmed transactions for array of addresses",
        "description": "Returns the list of unconfirmed transactions for an array of addresses",
        "operationId": "unconfirmedBulk",
        "requestBody": {
          "description": "Array of addresses",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Addresses"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressUtxoArray"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid Bitcoin Cash address as input.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid Bitcoin Cash address as input."
                }
              }
            }
          }
        }
      }
    },
    "/address/transactions/{address}": {
      "get": {
        "tags": ["address"],
        "summary": "Transactions for an address",
        "description": "Returns the list of transactions for an address",
        "operationId": "transactionsSingle",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "the address in cashAddr or legacy",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid value/s - Null"
          }
        }
      }
    },
    "/address/transactions": {
      "post": {
        "tags": ["address"],
        "summary": "Transactions for an array of addresses",
        "description": "Returns the list of transactions for an array of addresses",
        "operationId": "transactionsBulk",
        "requestBody": {
          "description": "Array of addresses",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Addresses"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Received an invalid Bitcoin Cash address as input.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid Bitcoin Cash address as input."
                }
              }
            }
          }
        }
      }
    },
    "/block/detailsByHash/{hash}": {
      "get": {
        "tags": ["block"],
        "summary": "Block details single",
        "description": "Details about a single block by hash",
        "operationId": "detailsHashSingle",
        "parameters": [
          {
            "name": "hash",
            "in": "path",
            "description": "Block hash",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockDetails"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid block hash.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid block hash."
                }
              }
            }
          }
        }
      }
    },
    "/block/detailsByHash": {
      "post": {
        "tags": ["block"],
        "summary": "Block details bulk",
        "description": "Details about multiple blocks by hashes",
        "operationId": "detailsHashBulk",
        "requestBody": {
          "description": "Array of hashes",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlockHashes"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockDetails"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid block hash.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid block hash."
                }
              }
            }
          }
        }
      }
    },
    "/block/detailsByHeight/{height}": {
      "get": {
        "tags": ["block"],
        "summary": "Block details single",
        "description": "Details about a single block by height",
        "operationId": "etailsHeightSingle",
        "parameters": [
          {
            "name": "height",
            "in": "path",
            "description": "Block height",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockDetails"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid block height.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid block height."
                }
              }
            }
          }
        }
      }
    },
    "/block/detailsByHeight": {
      "post": {
        "tags": ["block"],
        "summary": "Block details bulk",
        "description": "Bulk details about blocks by heights",
        "operationId": "detailsHeightBulk",
        "requestBody": {
          "description": "Array of heights",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlockHeights"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockDetails"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid block height.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid block height."
                }
              }
            }
          }
        }
      }
    },
    "/blockchain/getBestBlockHash": {
      "get": {
        "tags": ["blockchain"],
        "summary": "Hash of the best block in the longest blockchain.",
        "description": "Returns the hash of the best (tip) block in the longest blockchain.",
        "operationId": "getBestBlockHash",
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BestBlockHash"
                }
              }
            }
          }
        }
      }
    },
    "/blockchain/getBlockchainInfo": {
      "get": {
        "tags": ["blockchain"],
        "summary": "Info regarding blockchain processing",
        "description": "Returns an object containing various state info regarding blockchain processing.",
        "operationId": "getBlockchainInfo",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockchainInfo"
                }
              }
            }
          }
        }
      }
    },
    "/blockchain/getBlockCount": {
      "get": {
        "tags": ["blockchain"],
        "summary": "Number of blocks in the longest blockchain.",
        "description": "Returns the number of blocks in the longest blockchain.",
        "operationId": "getBlockCount",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockCount"
                }
              }
            }
          }
        }
      }
    },
    "/blockchain/getBlockHeader/{hash}": {
      "get": {
        "tags": ["blockchain"],
        "summary": "Information about blockheader hash",
        "description": "If verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'. If verbose is true, returns an Object with information about blockheader hash.",
        "operationId": "getBlockHeaderSingle",
        "parameters": [
          {
            "name": "hash",
            "in": "path",
            "description": "the block hash",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "verbose",
            "in": "query",
            "description": "true for a json object, false for the hex encoded data",
            "required": false,
            "example": "",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockHeader"
                }
              }
            }
          },
          "400": {
            "description": "Block not found",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Block not found"
                }
              }
            }
          }
        }
      }
    },
    "/blockchain/getBlockHeader": {
      "post": {
        "tags": ["blockchain"],
        "summary": "Bulk information about blockheader hash",
        "description": "Bulk information about blockheader hash",
        "operationId": "getBlockHeaderBulk",
        "requestBody": {
          "description": "Array of hashes",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Hashes"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockHeader"
                }
              }
            }
          },
          "400": {
            "description": "Block not found",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Block not found"
                }
              }
            }
          }
        }
      }
    },
    "/blockchain/getChainTips": {
      "get": {
        "tags": ["blockchain"],
        "summary": "Information about all known tips in the block tree",
        "description": "Return information about all known tips in the block tree, including the main chain as well as orphaned branches.",
        "operationId": "getChainTips",
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/blockchain/getDifficulty": {
      "get": {
        "tags": ["blockchain"],
        "summary": "Proof-of-work difficulty",
        "description": "Returns the proof-of-work difficulty as a multiple of the minimum difficulty.",
        "operationId": "getDifficulty",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Difficulty"
                }
              }
            }
          }
        }
      }
    },
    "/blockchain/getMempoolEntry/{txid}": {
      "get": {
        "tags": ["blockchain"],
        "summary": "Mempool data for transaction",
        "description": "Returns mempool data for given transaction",
        "operationId": "getMempoolEntrySingle",
        "parameters": [
          {
            "name": "txid",
            "in": "path",
            "description": "the transaction id (must be in mempool)",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Transaction not in mempool"
          }
        }
      }
    },
    "/blockchain/getMempoolEntry": {
      "post": {
        "tags": ["blockchain"],
        "summary": "Mempool data for transaction",
        "description": "Returns mempool data for given transaction",
        "operationId": "getMempoolEntryBulk",
        "requestBody": {
          "description": "Array of txids",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Txids"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Transaction not in mempool"
          }
        }
      }
    },
    "/blockchain/getMempoolInfo": {
      "get": {
        "tags": ["blockchain"],
        "summary": "The active state of the TX memory pool.",
        "description": "Returns details on the active state of the TX memory pool.",
        "operationId": "getMempoolInfo",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MempoolInfo"
                }
              }
            }
          }
        }
      }
    },
    "/blockchain/getRawMempool": {
      "get": {
        "tags": ["blockchain"],
        "summary": "All transaction ids in memory pool.",
        "description": "Returns all transaction ids in memory pool as a json array of string transaction ids.",
        "operationId": "getRawMempool",
        "parameters": [
          {
            "name": "verbose",
            "in": "query",
            "description": "True for a json object, false for array of transaction ids",
            "required": false,
            "example": "",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RawMempool"
                }
              }
            }
          }
        }
      }
    },
    "/blockchain/getTxOut/{txid}/{n}": {
      "get": {
        "tags": ["blockchain"],
        "summary": "Details about unspent transaction output.",
        "description": "Returns details about an unspent transaction output.",
        "operationId": "getTxOut",
        "parameters": [
          {
            "name": "txid",
            "in": "path",
            "description": "the transaction id",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "n",
            "in": "path",
            "description": "vout number",
            "required": true,
            "example": "",
            "schema": {
              "type": "number",
              "default": 0
            }
          },
          {
            "name": "mempool",
            "in": "query",
            "description": "Whether to include the mempool",
            "required": false,
            "example": "",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid value/s - Null"
          }
        }
      }
    },
    "/blockchain/getTxOutProof/{txid}": {
      "get": {
        "tags": ["blockchain"],
        "summary": "Hex-encoded proof that single txid was included.",
        "description": "Returns a hex-encoded proof that 'txid' was included in a block.",
        "operationId": "getTxOutProofSingle",
        "parameters": [
          {
            "name": "txid",
            "in": "path",
            "description": "a txid string",
            "example": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
    "/blockchain/getTxOutProof": {
      "post": {
        "tags": ["blockchain"],
        "summary": "Hex-encoded proof that multiple txids wwere included.",
        "description": "Returns a hex-encoded proof that multiple txids were included in a block.",
        "operationId": "getTxOutProofBulk",
        "requestBody": {
          "description": "Array of txids",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Txids"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
    "/blockchain/verifyTxOutProof/{proof}": {
      "get": {
        "tags": ["blockchain"],
        "summary": "Verify that a single proof points to a transaction in a block",
        "description": "Verifies that a proof points to a transaction in a block, returning the transaction it commits to and throwing an RPC error if the block is not in our best chain",
        "operationId": "verifyTxOutProofSingle",
        "parameters": [
          {
            "name": "proof",
            "in": "path",
            "description": "The hex-encoded proof generated by gettxoutproof",
            "example": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
    "/blockchain/verifyTxOutProof": {
      "post": {
        "tags": ["blockchain"],
        "summary": "Verify that bulk proofs point to transactions in a block",
        "description": "Verifies that bulk proofs point to transactions in a block",
        "operationId": "verifyTxOutProofBulk",
        "requestBody": {
          "description": "Array of proofs",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Proofs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
    "/control/getInfo": {
      "get": {
        "tags": ["control"],
        "summary": "Various state info.",
        "description": "Returns an object containing various state info.",
        "operationId": "getInfo",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                }
              }
            }
          }
        }
      }
    },
    "/mining/getMiningInfo": {
      "get": {
        "tags": ["mining"],
        "summary": "Returns a json object containing mining-related information.",
        "description": "",
        "operationId": "getMiningInfo",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MiningInfo"
                }
              }
            }
          }
        }
      }
    },
    "/mining/getNetworkHashps": {
      "get": {
        "tags": ["mining"],
        "summary": "Estimated network hashes per second",
        "description": "Returns the estimated network hashes per second based on the last n blocks. Pass in [blocks] to override # of blocks, -1 specifies since last difficulty change. Pass in [height] to estimate the network speed at the time when a certain block was found.",
        "operationId": "getNetworkHashps",
        "parameters": [
          {
            "in": "query",
            "name": "nblocks",
            "description": "the number of blocks, or -1 for blocks since last difficulty change.",
            "required": false,
            "example": "",
            "schema": {
              "type": "number"
            }
          },
          {
            "in": "query",
            "name": "height",
            "description": "to estimate at the time of the given height.",
            "required": false,
            "example": "",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkHashps"
                }
              }
            }
          }
        }
      }
    },
    "/rawtransactions/decodeRawTransaction/{hex}": {
      "get": {
        "tags": ["rawtransactions"],
        "summary": "Return the hex encoded transaction.",
        "description": "Return a JSON object representing the serialized, hex-encoded transaction.",
        "operationId": "decodeRawTransactionSingle",
        "parameters": [
          {
            "in": "path",
            "name": "hex",
            "description": "The transaction hex string",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DecodeRawTransaction"
                }
              }
            }
          },
          "400": {
            "description": "TX decode failed"
          }
        }
      }
    },
    "/rawtransactions/decodeRawTransaction": {
      "post": {
        "tags": ["rawtransactions"],
        "summary": "Return bulk hex encoded transaction.",
        "description": "Return bulk hex encoded transaction.",
        "operationId": "decodeRawTransactionBulk",
        "requestBody": {
          "description": "Array of hexes",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Hexes"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DecodeRawTransaction"
                }
              }
            }
          },
          "400": {
            "description": "TX decode failed"
          }
        }
      }
    },
    "/rawtransactions/decodeScript/{hex}": {
      "get": {
        "tags": ["rawtransactions"],
        "summary": "Decode a hex-encoded script.",
        "description": "Decode a hex-encoded script.",
        "operationId": "decodeScript",
        "parameters": [
          {
            "in": "path",
            "name": "hex",
            "description": "The hex encoded script",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DecodeScript"
                }
              }
            }
          },
          "400": {
            "description": "Argument must be hexadecimal string"
          }
        }
      }
    },
    "/rawtransactions/getRawTransaction/{txid}": {
      "get": {
        "tags": ["rawtransactions"],
        "summary": "Return the raw transaction data.",
        "description": "return the raw transaction data. If verbose is 'true', returns an Object with information about 'txid'. If verbose is 'false' or omitted, returns a string that is serialized, hex-encoded data for 'txid'.",
        "operationId": "getRawTransaction",
        "parameters": [
          {
            "in": "path",
            "name": "txid",
            "description": "The transaction id",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "verbose",
            "description": "If false, return a string, otherwise return a json object",
            "required": true,
            "example": "",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetRawTransaction"
                }
              }
            }
          },
          "400": {
            "description": "Transaction not found"
          }
        }
      }
    },
    "/rawtransactions/sendRawTransaction/{hex}": {
      "post": {
        "tags": ["rawtransactions"],
        "summary": "Submits raw transaction to local node and network.",
        "description": "Submits raw transaction (serialized, hex-encoded) to local node and network. Also see createrawtransaction and signrawtransaction calls.",
        "operationId": "sendRawTransaction",
        "parameters": [
          {
            "in": "path",
            "name": "hex",
            "description": "The hex string of the raw transaction",
            "required": true,
            "example": "01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0704ffff001d0104ffffffff0100f2052a0100000043410496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858eeac00000000",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Transaction not found"
          }
        }
      }
    },
    "/rawtransactions/create/{inputs}/{outputs}": {
      "post": {
        "tags": ["rawtransactions"],
        "summary": "createRawTxChange",
        "description": "Create a transaction spending the given inputs and creating new outputs. API Reference: https://developer.bitcoin.com/wormhole/docs/rawTransactions",
        "operationId": "rawTransactionsCreate",
        "parameters": [
          {
            "name": "inputs",
            "in": "path",
            "description": "A json array of json objects",
            "required": true,
            "example": "[{\"txid\":\"myid\",\"vout\":0}]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "outputs",
            "in": "path",
            "description": "A json object with outputs",
            "required": true,
            "example": "{}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locktime",
            "in": "query",
            "description": "Raw locktime. Non-0 value also locktime-activates inputs",
            "required": false,
            "example": 0,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          },
          "400": {
            "description": "Received an invalid block height.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid block height."
                }
              }
            }
          }
        }
      }
    },
    "/rawtransactions/change/{rawTx}/{prevTxs}/{destination}/{fee}": {
      "post": {
        "tags": ["rawtransactions"],
        "summary": "createRawTxChange",
        "description": "Adds a change output to the transaction.API Reference: https://developer.bitcoin.com/wormhole/docs/rawTransactions",
        "operationId": "rawTransactionsChange",
        "parameters": [
          {
            "name": "rawTx",
            "in": "path",
            "description": "The raw transaction to extend",
            "required": true,
            "example": "0100000001b15ee60431ef57ec682790dec5a3c0d83a0c360633ea8308fbf6d5fc10a779670400000000ffffffff025c0d00000000000047512102f3e471222bb57a7d416c82bf81c627bfcd2bdc47f36e763ae69935bba4601ece21021580b888ff56feb27f17f08802ebed26258c23697d6a462d43fc13b565fda2dd52aeaa0a0000000000001976a914946cb2e08075bcbaf157e47bcb67eb2b2339d24288ac00000000",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prevTxs",
            "in": "path",
            "description": "A JSON array of transaction inputs",
            "required": true,
            "example": "[{\"txid\":\"6779a710fcd5f6fb0883ea3306360c3ad8c0a3c5de902768ec57ef3104e65eb1\",\"vout\":4,\"scriptPubKey\":\"76a9147b25205fd98d462880a3e5b0541235831ae959e588ac\",\"value\":0.00068257}]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "destination",
            "in": "path",
            "description": "The destination for the change",
            "required": true,
            "example": "bchtest:qq2j9gp97gm9a6lwvhxc4zu28qvqm0x4j5e72v7ejg",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fee",
            "in": "path",
            "description": "The desired transaction fees",
            "required": true,
            "example": 0.000035,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "position",
            "in": "query",
            "description": "The position of the change output (default: first position)",
            "required": false,
            "example": 1,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          },
          "400": {
            "description": "Received an invalid block height.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid block height."
                }
              }
            }
          }
        }
      }
    },
    "/rawtransactions/input/{rawTx}/{txid}/{n}": {
      "post": {
        "tags": ["rawtransactions"],
        "summary": "createRawTxInput",
        "description": "Adds a transaction input to the transaction.API Reference: https://developer.bitcoin.com/wormhole/docs/rawTransactions",
        "operationId": "rawTransactionsInput",
        "parameters": [
          {
            "name": "rawTx",
            "in": "path",
            "description": "The raw transaction to extend",
            "required": true,
            "example": "01000000000000000000",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "txid",
            "in": "path",
            "description": "The hash of the input transaction",
            "required": true,
            "example": "b006729017df05eda586df9ad3f8ccfee5be340aadf88155b784d1fc0e8342ee",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "n",
            "in": "path",
            "description": "The index of the transaction output used as input",
            "required": true,
            "example": 0,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/rawtransactions/opReturn/{rawTx}/{payload}": {
      "post": {
        "tags": ["rawtransactions"],
        "summary": "createRawTxOpReturn",
        "description": "Adds a payload with class C (op-return) encoding to the transaction.API Reference: https://developer.bitcoin.com/wormhole/docs/rawTransactions",
        "operationId": "rawTransactionsOpReturn",
        "parameters": [
          {
            "name": "rawTx",
            "in": "path",
            "description": "The raw transaction to extend",
            "required": true,
            "example": "01000000000000000000",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "payload",
            "in": "path",
            "description": "The hex-encoded payload to add",
            "required": true,
            "example": "00000000000000020000000006dac2c0",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/rawtransactions/reference/{rawTx}/{destination}": {
      "post": {
        "tags": ["rawtransactions"],
        "summary": "createRawTxReference",
        "description": "Adds a reference output to the transaction. API Reference: https://developer.bitcoin.com/wormhole/docs/rawTransactions",
        "operationId": "rawTransactionsReference",
        "parameters": [
          {
            "name": "rawTx",
            "in": "path",
            "description": "The raw transaction to extend",
            "required": true,
            "example": "0100000001a7a9402ecd77f3c9f745793c9ec805bfa2e14b89877581c734c774864247e6f50400000000ffffffff03aa0a0000000000001976a9146d18edfe073d53f84dd491dae1379f8fb0dfe5d488ac5c0d0000000000004751210252ce4bdd3ce38b4ebbc5a6e1343608230da508ff12d23d85b58c964204c4cef3210294cc195fc096f87d0f813a337ae7e5f961b1c8a18f1f8604a909b3a5121f065b52aeaa0a0000000000001976a914946cb2e08075bcbaf157e47bcb67eb2b2339d24288ac00000000",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "destination",
            "in": "path",
            "description": "The reference address or destination",
            "required": true,
            "example": "bchtest:qq2j9gp97gm9a6lwvhxc4zu28qvqm0x4j5e72v7ejg",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "amount",
            "in": "query",
            "description": "The optional reference amount (minimal by default)",
            "required": false,
            "example": 0.005,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/transaction/details/{txid}": {
      "get": {
        "tags": ["transaction"],
        "summary": "Transaction details single",
        "description": "Details about a single transaction",
        "operationId": "transactionDetailsSingle",
        "parameters": [
          {
            "in": "path",
            "name": "txid",
            "description": "single txid or url encoded array of txids",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionDetails"
                }
              }
            }
          },
          "400": {
            "description": "Transaction not found"
          }
        }
      }
    },
    "/transaction/details": {
      "post": {
        "tags": ["transaction"],
        "summary": "Transaction details bulk",
        "description": "Bulk Details about a transaction",
        "operationId": "transactionDetailsBulk",
        "requestBody": {
          "description": "Array of txids",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Txids"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionDetails"
                }
              }
            }
          },
          "400": {
            "description": "Transaction not found"
          }
        }
      }
    },
    "/util/validateAddress/{address}": {
      "get": {
        "tags": ["util"],
        "summary": "Information about single bitcoin cash address.",
        "description": "Return information about single bitcoin cash address.",
        "operationId": "validateAddressSingle",
        "parameters": [
          {
            "in": "path",
            "name": "address",
            "description": "The bitcoin address to validate",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAddress"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Address"
          }
        }
      }
    },
    "/util/validateAddress": {
      "post": {
        "tags": ["util"],
        "summary": "Information about bulk bitcoin cash addresses.",
        "description": "Return information about bulk bitcoin cash addresses.",
        "operationId": "validateAddressBulk",
        "requestBody": {
          "description": "Array of Addresses",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Addresses"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAddress"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Address"
          }
        }
      }
    },
    "/rawtransactions/decodeTransaction/{rawTx}": {
      "get": {
        "tags": ["rawtransactions"],
        "summary": "decodeTransaction",
        "description": "Decodes an Omni transaction. API Reference: https://developer.bitcoin.com/wormhole/docs/rawTransactions",
        "operationId": "decodeTransaction",
        "parameters": [
          {
            "name": "rawTx",
            "in": "path",
            "description": "The raw transaction to decode",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/dataRetrieval/balance/{address}/{propertyId}": {
      "get": {
        "tags": ["dataRetrieval"],
        "summary": "balance",
        "description": "Returns the token balance for a given address and property.",
        "operationId": "balance",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "The address",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "propertyId",
            "in": "path",
            "description": "The property identifier",
            "required": true,
            "example": "",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          },
          "400": {
            "description": "Invalid address. Note: use cashAddress"
          }
        }
      }
    },
    "/dataRetrieval/balancesForAddress/{address}": {
      "get": {
        "tags": ["dataRetrieval"],
        "summary": "balancesForAddress",
        "description": "Returns a list of all token balances for a given address. API reference: https://developer.bitcoin.com/wormhole/docs/dataRetrieval",
        "operationId": "balancesForAddress",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "The address",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          },
          "400": {
            "description": "Invalid address. Note: use cashAddress"
          }
        }
      }
    },
    "/dataRetrieval/balancesForId/{propertyId}": {
      "get": {
        "tags": ["dataRetrieval"],
        "summary": "balanceForId",
        "description": "Returns a list of token balances for a given currency or property identifier. API Reference: https://developer.bitcoin.com/wormhole/docs/dataRetrieval",
        "operationId": "balancesForId",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "description": "The property identifier",
            "required": true,
            "example": "",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          },
          "400": {
            "description": "Invalid address. Note: use cashAddress"
          }
        }
      }
    },
    "/dataRetrieval/balancesHash/{propertyId}": {
      "get": {
        "tags": ["dataRetrieval"],
        "summary": "balancesHash",
        "description": "Returns a hash of the balances for the property.",
        "operationId": "balancesHash",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "description": "The property to hash balances for",
            "required": true,
            "example": "",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          },
          "400": {
            "description": "JSON value is not an integer as expected"
          }
        }
      }
    },
    "/dataRetrieval/crowdSale/{propertyId}": {
      "get": {
        "tags": ["dataRetrieval"],
        "summary": "crowdSale",
        "description": "Returns information about a crowdsale.",
        "operationId": "crowdSale",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "description": "The identifier of the crowdsale",
            "required": true,
            "example": "",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "verbose",
            "in": "query",
            "description": "List crowdsale participants (default: false)",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          },
          "400": {
            "description": "JSON value is not an integer as expected"
          }
        }
      }
    },
    "/dataRetrieval/currentConsensusHash": {
      "get": {
        "tags": ["dataRetrieval"],
        "summary": "currentConsensusHash",
        "description": "Returns the consensus hash for all balances for the current block.",
        "operationId": "currentConsensusHash",
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/dataRetrieval/grants/{propertyId}": {
      "get": {
        "tags": ["dataRetrieval"],
        "summary": "grants",
        "description": "Returns information about granted and revoked units of managed tokens.",
        "operationId": "grants",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "description": "The identifier of the managed tokens to lookup",
            "required": true,
            "example": "",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          },
          "400": {
            "description": "JSON value is not an integer as expected"
          }
        }
      }
    },
    "/dataRetrieval/info": {
      "get": {
        "tags": ["dataRetrieval"],
        "summary": "info",
        "description": "Returns various state information of the client and protocol.",
        "operationId": "info",
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/dataRetrieval/payload/{txid}": {
      "get": {
        "tags": ["dataRetrieval"],
        "summary": "payload",
        "description": "Get the payload for an Omni transaction.",
        "operationId": "payload",
        "parameters": [
          {
            "name": "txid",
            "in": "path",
            "description": "The hash of the transaction to retrieve payload",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          },
          "400": {
            "description": "Received an invalid txid as input."
          }
        }
      }
    },
    "/dataRetrieval/property/{propertyId}": {
      "get": {
        "tags": ["dataRetrieval"],
        "summary": "property",
        "description": "Returns details for about the tokens or smart property to lookup.",
        "operationId": "property",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "description": "The identifier of the tokens or property",
            "required": true,
            "example": "",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          },
          "400": {
            "description": "JSON value is not an integer as expected"
          }
        }
      }
    },
    "/dataRetrieval/seedBlocks/{startBlock}/{endBlock}": {
      "get": {
        "tags": ["dataRetrieval"],
        "summary": "seedBlocks",
        "description": "Returns a list of blocks containing Omni transactions for use in seed block filtering.",
        "operationId": "seedBlocks",
        "parameters": [
          {
            "name": "startBlock",
            "in": "path",
            "description": "The first block to look for Omni transactions (inclusive)",
            "required": true,
            "example": "",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "endBlock",
            "in": "path",
            "description": "The last block to look for Omni transactions (inclusive)",
            "required": true,
            "example": "",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          },
          "400": {
            "description": "JSON value is not an integer as expected"
          }
        }
      }
    },
    "/dataRetrieval/STO/{txid}/{recipientFilter}": {
      "get": {
        "tags": ["dataRetrieval"],
        "summary": "STO",
        "description": "Get information and recipients of a send-to-owners transaction.",
        "operationId": "drSTO",
        "parameters": [
          {
            "name": "txid",
            "in": "path",
            "description": "The hash of the transaction to lookup",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recipientFilter",
            "in": "path",
            "description": "A filter for recipients (wallet by default, '*' for all)",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          },
          "400": {
            "description": "Invalid address. Note: use cashAddress"
          }
        }
      }
    },
    "/dataRetrieval/transaction/{txid}": {
      "get": {
        "tags": ["dataRetrieval"],
        "summary": "transaction",
        "description": "Get detailed information about an Omni transaction.",
        "operationId": "transaction",
        "parameters": [
          {
            "name": "txid",
            "in": "path",
            "description": "The hash of the transaction to lookup",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          },
          "400": {
            "description": "No information available about transaction"
          }
        }
      }
    },
    "/dataRetrieval/blockTransactions/{index}": {
      "get": {
        "tags": ["dataRetrieval"],
        "summary": "blockTransactions",
        "description": "Lists all Omni transactions in a block.",
        "operationId": "blockTransactions",
        "parameters": [
          {
            "name": "index",
            "in": "path",
            "description": "The block height or block index",
            "required": true,
            "example": "",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          },
          "400": {
            "description": "JSON value is not an integer as expected"
          }
        }
      }
    },
    "/dataRetrieval/pendingTransactions/{address}": {
      "get": {
        "tags": ["dataRetrieval"],
        "summary": "pendingTransactions",
        "description": "Returns a list of unconfirmed Omni transactions, pending in the memory pool.",
        "operationId": "pendingTransactions",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Address filter (default: '' for no filter)",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          },
          "400": {
            "description": "Invalid address. Note: use cashAddress"
          }
        }
      }
    },
    "/dataRetrieval/properties": {
      "get": {
        "tags": ["dataRetrieval"],
        "summary": "properties",
        "description": "Lists all tokens or smart properties.",
        "operationId": "properties",
        "parameters": [
          {
            "name": "address",
            "in": "query",
            "description": "address filter (default: '*')",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "show at most n transactions (default: 10)",
            "required": false,
            "example": "",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "skip the first n transactions (default: 0)",
            "required": false,
            "example": "",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "startBlock",
            "in": "query",
            "description": "first block to begin the search (default: 0)",
            "required": false,
            "example": "",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "endBlock",
            "in": "query",
            "description": "last block to include in the search (default: 9999999)",
            "required": false,
            "example": "",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/dataRetrieval/frozenBalance/{address}/{propertyId}": {
      "get": {
        "tags": ["dataRetrieval"],
        "summary": "frozenBalance",
        "description": "Returns the frozen token balance for a given address and property.",
        "operationId": "frozenBalance",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "the address",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "propertyId",
            "in": "path",
            "description": "the property identifier",
            "required": true,
            "example": "",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/dataRetrieval/frozenBalanceForAddress/{address}": {
      "get": {
        "tags": ["dataRetrieval"],
        "summary": "frozenBalanceForAddress",
        "description": "Returns the frozen token balance for a given address and property.",
        "operationId": "frozenBalanceForAddress",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "the address",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/dataRetrieval/frozenBalanceForId/{propertyId}": {
      "get": {
        "tags": ["dataRetrieval"],
        "summary": "frozenBalanceForId",
        "description": "Returns the frozen token balance for a given property.",
        "operationId": "frozenBalanceForId",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "description": "the Property ID",
            "required": true,
            "example": "",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/dataRetrieval/ERC721AddressTokens/{address}/{propertyId}": {
      "get": {
        "tags": ["dataRetrieval"],
        "summary": "ERC721AddressTokens",
        "description": "Returns details for about the tokens or smart property to lookup.",
        "operationId": "dataRetrievalERC721AddressTokens",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "the address of the query",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "propertyId",
            "in": "path",
            "description": "the identifier of the ERC721 property",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/dataRetrieval/ERC721PropertyDestroyTokens/{propertyId}": {
      "get": {
        "tags": ["dataRetrieval"],
        "summary": "ERC721PropertyDestroyTokens",
        "description": "Returns details for about the destroy tokens to lookup.",
        "operationId": "dataRetrievalERC721PropertyDestroyTokens",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "description": "the identifier of the ERC721 property",
            "required": true,
            "example": "0x01",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/dataRetrieval/ERC721PropertyNews/{propertyId}": {
      "get": {
        "tags": ["dataRetrieval"],
        "summary": "ERC721PropertyNews",
        "description": "Returns details for about the tokens or smart property to lookup.",
        "operationId": "dataRetrievalERC721PropertyNews",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "description": "the identifier of the ERC721 property",
            "required": true,
            "example": "0x01",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/dataRetrieval/ERC721TokenNews/{propertyId}/{tokenId}": {
      "get": {
        "tags": ["dataRetrieval"],
        "summary": "ERC721TokenNews",
        "description": "Returns details for about the tokens or smart property to lookup.",
        "operationId": "dataRetrievalERC721TokenNews",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "description": "the identifier of the ERC721 property",
            "required": true,
            "example": "0x02",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tokenId",
            "in": "path",
            "description": "the identifier of the ERC721 token",
            "required": true,
            "example": "0x01",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/dataRetrieval/ownerOfERC721Token/{propertyId}/{tokenId}/{address}": {
      "get": {
        "tags": ["dataRetrieval"],
        "summary": "ownerOfERC721Token",
        "description": "Query whether the Token's owner is the specified address.",
        "operationId": "dataRetrievalOwnerOfERC721Token",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "description": "the identifier of the ERC721 property",
            "required": true,
            "example": "0x03",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tokenId",
            "in": "path",
            "description": "the identifier of the ERC721 token",
            "required": true,
            "example": "0x01",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "in": "path",
            "description": "query address for the specified ERC721 Token",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/payloadCreation/burnBCH": {
      "get": {
        "tags": ["payloadCreation"],
        "summary": "burnBCH",
        "description": "Creates the payload to burn bch to get whc.",
        "operationId": "burnBCH",
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/payloadCreation/changeIssuer": {
      "post": {
        "tags": ["payloadCreation"],
        "summary": "changeIssuer",
        "description": "Creates the payload to change the issuer on record of the given tokens.",
        "operationId": "changeIssuer",
        "requestBody": {
          "description": "The identifier of the tokens",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PropertyId"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful response"
          },
          "500": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Not Found."
                }
              }
            }
          }
        }
      }
    },
    "/payloadCreation/closeCrowdSale": {
      "post": {
        "tags": ["payloadCreation"],
        "summary": "closeCrowdSale",
        "description": "Creates the payload to manually close a crowdsale.",
        "operationId": "closeCrowdSale",
        "requestBody": {
          "description": "The identifier of the crowdsale to close",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PropertyId"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful response"
          },
          "400": {
            "description": "JSON value is not an integer as expected",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "JSON value is not an integer as expected"
                }
              }
            }
          }
        }
      }
    },
    "/payloadCreation/grant": {
      "post": {
        "tags": ["payloadCreation"],
        "summary": "grant",
        "description": "Creates the payload to issue or grant new units of managed tokens.",
        "operationId": "grant",
        "requestBody": {
          "description": "The identifier of the tokens to grant, amount of tokens to create and text note attached to this transaction",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Grant"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful response"
          },
          "400": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Not Found"
                }
              }
            }
          }
        }
      }
    },
    "/payloadCreation/crowdsale": {
      "post": {
        "tags": ["payloadCreation"],
        "summary": "crowdsale",
        "description": "Creates the payload for a new tokens issuance with crowdsale.",
        "operationId": "crowdsale",
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Crowdsale"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/payloadCreation/fixed": {
      "post": {
        "tags": ["payloadCreation"],
        "summary": "fixed",
        "description": "Creates the payload for a new tokens issuance with fixed supply.",
        "operationId": "fixed",
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Fixed"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/payloadCreation/managed": {
      "post": {
        "tags": ["payloadCreation"],
        "summary": "managed",
        "description": "Creates the payload for a new tokens issuance with manageable supply.",
        "operationId": "managed",
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Managed"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful response"
          },
          "400": {
            "description": "Received an invalid Bitcoin Cash address as input."
          }
        }
      }
    },
    "/payloadCreation/participateCrowdSale": {
      "post": {
        "tags": ["payloadCreation"],
        "summary": "participateCrowdSale",
        "description": "Create the payload for a participate crowdsale transaction",
        "operationId": "participateCrowdSale",
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ParticipateCrowdSale"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/payloadCreation/revoke": {
      "post": {
        "tags": ["payloadCreation"],
        "summary": "revoke",
        "description": "Creates the payload to revoke units of managed tokens.",
        "operationId": "revoke",
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Revoke"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/payloadCreation/sendAll": {
      "post": {
        "tags": ["payloadCreation"],
        "summary": "sendAll",
        "description": "Create the payload for a send all transaction.",
        "operationId": "sendAll",
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendAll"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/payloadCreation/simpleSend": {
      "post": {
        "tags": ["payloadCreation"],
        "summary": "simpleSend",
        "description": "Create the payload for a simple send transaction.",
        "operationId": "simpleSend",
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimpleSend"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/payloadCreation/STO": {
      "post": {
        "tags": ["payloadCreation"],
        "summary": "STO",
        "description": "Creates the payload for a send-to-owners transaction",
        "operationId": "STO",
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/STO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/payloadCreation/freeze": {
      "post": {
        "tags": ["payloadCreation"],
        "summary": "freeze",
        "description": "Creates the payload for a freeze transaction",
        "operationId": "freeze",
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Freeze"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/payloadCreation/unfreeze": {
      "post": {
        "tags": ["payloadCreation"],
        "summary": "unfreeze",
        "description": "Creates the payload for an unfreeze transaction",
        "operationId": "unfreeze",
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Unfreeze"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/wormhole/transaction/confirmed": {
      "post": {
        "tags": ["wormhole"],
        "summary": "Confirmed wormhole transactions",
        "description": "Confirmed wormhole transactions",
        "operationId": "whTxConfirmed",
        "requestBody": {
          "description": "Array of addresses",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WHConfirmed"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/slp/list": {
      "get": {
        "tags": ["slp"],
        "summary": "list",
        "description": "List all SLP tokens",
        "operationId": "slpList",
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/slp/list/{tokenId}": {
      "get": {
        "tags": ["slp"],
        "summary": "list token",
        "description": "List single SLP token by id",
        "operationId": "slpListToken",
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "description": "The token id",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/slp/balancesForAddress/{address}": {
      "get": {
        "tags": ["slp"],
        "summary": "list slp balances for address",
        "description": "List SLP token balances for address",
        "operationId": "slpBalancesForAddress",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "The slp address",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/slp/balance/{address}/{tokenId}": {
      "get": {
        "tags": ["slp"],
        "summary": "list single slp token balance for address",
        "description": "List single SLP token balance for address",
        "operationId": "slpListSingleBalanceForAddress",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "The slp address",
            "required": true,
            "example": "simpleledger:qz9tzs6d5097ejpg279rg0rnlhz546q4fsnck9wh5m",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tokenId",
            "in": "path",
            "description": "The token id",
            "required": true,
            "example": "1cda254d0a995c713b7955298ed246822bee487458cd9747a91d9e81d9d28125",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/slp/address/convert/{address}": {
      "get": {
        "tags": ["slp"],
        "summary": "convert address to slpAddr, cashAddr and legacy",
        "description": "convert address to slpAddr, cashAddr and legacy",
        "operationId": "slpAddressConvert",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "The slp address",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/slp/balancesForToken/{tokenId}": {
      "get": {
        "tags": ["slp"],
        "summary": "list slp balances for all holders of a token",
        "description": "List SLP token balances for all holders of a token",
        "operationId": "slpListBalancesForToken",
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "description": "The slp token id",
            "required": true,
            "example": "d7c32d972a21b664f60b5fc422900179d8883dec7bd61418434aa12b09b99c12",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/slp/validate/{txid}": {
      "get": {
        "tags": ["slp"],
        "summary": "Validate a single txid",
        "description": "Validate TXID",
        "operationId": "slpValidate",
        "parameters": [
          {
            "name": "txid",
            "in": "path",
            "description": "The txid",
            "required": true,
            "example": "d7c32d972a21b664f60b5fc422900179d8883dec7bd61418434aa12b09b99c12",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    }
  }
}
